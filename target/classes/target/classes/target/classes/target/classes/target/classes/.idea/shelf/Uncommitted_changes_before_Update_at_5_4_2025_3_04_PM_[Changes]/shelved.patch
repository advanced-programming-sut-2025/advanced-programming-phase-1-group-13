Index: controllers/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.*;\r\nimport models.enums.Quality;\r\nimport models.enums.Skill;\r\nimport models.enums.types.*;\r\nimport models.enums.types.FarmBuildingType;\r\nimport models.tools.FishingRod;\r\nimport models.tools.MilkPail;\r\nimport models.tools.Shear;\r\nimport models.tools.Tool;\r\nimport models.enums.environment.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    User player = App.getLoggedIn();\r\n    Game game = App.getCurrentGame();\r\n    Shop shop = App.getCurrentShop();\r\n\r\n\r\n    // === PLAYER'S STATUS === //\r\n\r\n    public Result showPlayerEnergy() {\r\n        int playerEnergy = player.getEnergy();\r\n        return new Result(true, \"Your energy is: \" + playerEnergy);\r\n    }\r\n\r\n    public Result setPlayerEnergy(String energyAmountStr) {\r\n        int energyAmount = Integer.parseInt(energyAmountStr);\r\n\r\n        player.setEnergy(energyAmount);\r\n        return new Result(true, \"Energy set to \" + energyAmount);\r\n    }\r\n\r\n    public Result setUnlimitedEnergy() {\r\n        player.setEnergyUnlimited(true);\r\n        return new Result(true, \"Unlimited Energy activated!\");\r\n    }\r\n\r\n    public Result faint() {\r\n        player.faint();\r\n        return new Result(true, \"\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result showCurrentTool() {\r\n        Tool playerCurrentTool = player.getCurrentTool();\r\n        return new Result(true, \"Your tool is: \" + playerCurrentTool.toString()); // todo: is message OK?\r\n    }\r\n\r\n    public Result showLearntCookingRecipes() {\r\n        String learntRecipes = player.getStringLearntCookingRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    public Result showLearntCraftRecipes() {\r\n        String learntRecipes = player.getStringLearntCraftRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    // === INVENTORY === //\r\n    public Result inventoryShow() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result throwItemToTrash(String itemName, String numberStr) {\r\n        // command: inventory trash ...\r\n        // TODO: get Item from name\r\n        // TODO: get number from numStr\r\n        // TODO: throw away\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TOOLS, FOODS, ITEMS, AND CRAFTS === //\r\n\r\n    public Result equipTool(String toolName) {\r\n        // TODO: get Tool by its name (return appropriate failing message if null)\r\n        // TODO: equip tool\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result useTool(String directionString) {\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n        Position position = neighborTile(direction);\r\n        Tool tool = player.getCurrentTool();\r\n        if (canToolBeUsedHere(position, tool)) {\r\n            tool.useTool(direction);\r\n            return new Result(true, \"\"); // todo: appropriate message\r\n        }\r\n        return new Result(false, \"You can't use that tool in that direction\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result placeItem(String itemName, String directionString) {\r\n        Item item = getItemByItemName(itemName);\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n\r\n        Position position = neighborTile(direction);\r\n        if (canItemBePlacedHere(position, item)) {\r\n            // TODO: place item\r\n            // TODO: LEARN ABOUT assert position != null;\r\n            return new Result(true, item + \" placed at \" + position.toString());\r\n        }\r\n        return new Result(false, \"you can't place that item at \" + position.toString());\r\n\r\n    }\r\n\r\n    public Result craft(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        if (!canCraft(item)) {\r\n            return new Result(false, \"Not possible to craft that item!\");\r\n        }\r\n        // TODO: craft item and add it to inventory.\r\n        return new Result(true, \"Item crafted and added to inventory.\");\r\n    }\r\n\r\n    public Result showCraftInfo(String craftName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddItem(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        // TODO: handle the optional \"count\" flag\r\n        // TODO: add item to inventory\r\n        return new Result(true, \"Item added to inventory.\");\r\n    }\r\n\r\n    // or name it cook() ?\r\n    public Result prepareCook(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        if (!canCook(food)) {\r\n            return new Result(false, \"You cannot cook this right now.\");\r\n            // todo: or specify the cause of the error...\r\n        }\r\n        // TODO: cook and add to inventory\r\n        return new Result(true, \"Yummy! Your meal is ready.\");\r\n    }\r\n\r\n    public Result eat(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        // TODO: check if player HAS the food, and return appropriate Result if not.\r\n        // TODO: increase energy\r\n        // TODO: apply buff\r\n        player.eat(food.getName());\r\n        return new Result(true, \"\"); // todo: return appropriate Result (list the buff, etc. ?)\r\n    }\r\n\r\n    private boolean canCraft(Item item) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canCook(FoodType food) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canToolBeUsedHere(Position position, Tool tool) {\r\n        // TODO: check the tile at \"position\" and check if tool can be used!\r\n        return false;\r\n    }\r\n\r\n    private boolean canItemBePlacedHere(Position position, Item item) {\r\n        // TODO: check the tile at \"position\" and check if item can be placed there!\r\n        return false;\r\n    }\r\n\r\n    private Position neighborTile(Direction direction) {\r\n        // TODO: return the position of the neighbour tile, if within the range of our map of farms.\r\n        return null;\r\n    }\r\n\r\n    private Tile getTileByPosition(Position position) {\r\n        // TODO: loop (the entire map) and return the tile whose position equals \"position\".\r\n        return null;\r\n    }\r\n\r\n\r\n    // === WALK === //\r\n\r\n    public Result walk(Path path, String walkConfirmation) {\r\n        Boolean playerConfirmed = switch (walkConfirmation) {\r\n            case \"y\" -> true;\r\n            case \"n\" -> false;\r\n            default -> null;\r\n        };\r\n        if (playerConfirmed == null) {\r\n            return new Result(false, \"the confirmation must be \\\"y\\\" or \\\"n\\\"\");\r\n        }\r\n        if (!playerConfirmed) {\r\n            return new Result(false, \"You denied the walk.\");\r\n        }\r\n        // TODO: Walk path! i.e. call player's inner changePosition(x,y) method.\r\n        Position destination = path.getPathTiles().getLast();\r\n        player.changePosition(destination);\r\n        return new Result(true, \"Walking...\");\r\n    }\r\n\r\n    public Result respondForWalkRequest(String xString, String yString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        Position destination = new Position(x, y);\r\n        Position origin = player.getPosition();\r\n        Path path = findValidPath(origin, destination);\r\n        if (path == null) {\r\n            return new Result(false, \"No valid path found!\");\r\n        }\r\n        StringBuilder walkConfirmRequest = new StringBuilder();\r\n        walkConfirmRequest\r\n                .append(\"Do you confirm the walk?\\n\")\r\n                .append(\"(respond with \\\"walk confirm\\\" followed by \\\"y\\\" or \\\"n\\\"\");\r\n        return new Result(true, walkConfirmRequest.toString());\r\n        // [we can also show the path and then ask for confirmation]\r\n\r\n        /*\r\n        In View: after calling this method, we expect the player to confirm/deny\r\n        Then, we call the walk() method.\r\n        */\r\n    }\r\n\r\n    private Path findValidPath(Position origin, Position destination) {\r\n        // give FarmsMap as argument?\r\n        if (!isDestinationAllowed(destination)) {\r\n            return null;\r\n        }\r\n        // TODO: build a valid path and return it\r\n        return new Path();\r\n    }\r\n\r\n    private boolean isDestinationAllowed(Position destination) {\r\n        // TODO: check if destination is in OUR Farm.\r\n        return false;\r\n    }\r\n\r\n    // === PRINT MAP === //\r\n\r\n    public Result printMap(String xString, String yString, String sizeString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        int size = Integer.parseInt(sizeString);\r\n        return new Result(true, \"\"); // TODO: print map.\r\n    }\r\n\r\n    public Result printColoredMap() {\r\n        return new Result(true, \"\"); // TODO: print a colored map.\r\n    }\r\n\r\n    public Result showHelpReadingMap() {\r\n        return new Result(true, \"\"); // TODO: show the \"Help\" / enter the Help menu / ...\r\n    }\r\n\r\n\r\n    // === GAME STATUS === //\r\n\r\n    public Result cheatAdvanceTime(String howManyHoursString) {\r\n        int howManyHours = Integer.parseInt(howManyHoursString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAdvanceDate(String howManyDaysString) {\r\n        int howManyDays = Integer.parseInt(howManyDaysString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatThor(String x, String y) {\r\n        Position position = new Position(Integer.parseInt(x), Integer.parseInt(y));\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeather() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeatherForecast() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatWeatherSet(String newWeatherString) {\r\n        // TODO : get weather type from name\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result buildGreenhouse() {\r\n        if (!canBuildGreenhouse()) {\r\n            return new Result(false, \"You can't build greenhouse!\");\r\n        }\r\n        // TODO: build a greenhouse\r\n        return new Result(true, \"Building greenhouse...\"); // todo: show its info in detail?\r\n    }\r\n\r\n    private boolean canBuildGreenhouse() {\r\n        // TODO: check if we have the required material\r\n        // + is only ONE greenhouse allowed?\r\n        return false;\r\n    }\r\n\r\n\r\n    // === PLANTS === //\r\n\r\n    public Result plant(String seedName, String directionName) {\r\n        // TODO: get Seed from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showPlant(String xString, String yString) {\r\n        Position position = new Position(Integer.parseInt(xString), Integer.parseInt(yString));\r\n        Tile tile = getTileByPosition(position);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result fertilize(String fertilizerName, String directionName) {\r\n        // TODO : get FertilizerType from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        // TODO: fertilize\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n\r\n    // === FARM BUILDINGS & ANIMALS === //\r\n\r\n    public Result build(String farmBuildingTypeStr, String xString, String yString) {\r\n        FarmBuildingType farmBuildingType = FarmBuildingType.getFarmBuildingTypeByName(farmBuildingTypeStr);\r\n        Position position = getPositionByStrings(xString, yString);\r\n        if (position == null) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        }\r\n\r\n        Farm farm = player.getFarm();\r\n        FarmBuilding farmBuilding = new FarmBuilding(farmBuildingType, position);\r\n\r\n        boolean canPlace = canPlaceBuilding(farm, farmBuildingType, position);\r\n\r\n        if (!canPlace) {\r\n            return new Result(false, \"Can't build a \" + farmBuildingType.getName() +\r\n                    \" in this position, because the ground is not empty.\");\r\n        }\r\n\r\n        HashMap<Item, Integer> items = player.getBackpack().getItems();\r\n        Material wood = new Material(MaterialType.WOOD);\r\n        Material stone = new Material(MaterialType.STONE);\r\n        int woodInInventory = items.get(wood);\r\n        int stoneInInventory = items.get(stone);\r\n        int woodNeeded = farmBuildingType.getWoodCount();\r\n        int stoneNeeded = farmBuildingType.getStoneCount();\r\n        boolean enoughSupplies = (woodNeeded <= woodInInventory) && (stoneNeeded <= stoneInInventory);\r\n\r\n        double cost = farmBuildingType.getCost();\r\n        boolean enoughMoney = player.getBalance() >= cost;\r\n\r\n        if (!enoughSupplies && !enoughMoney) {\r\n            return new Result(false, \"You don't have enough supplies or money to build a \"\r\n                    + farmBuildingType.getName());\r\n        }\r\n\r\n        String methodOfPaymentDescription;\r\n        if (!enoughSupplies) {\r\n            player.changeBalance(cost);\r\n            methodOfPaymentDescription = \"You payed \" + cost + \"g to build it.\";\r\n        } else {\r\n            int newWoodCount = woodInInventory - woodNeeded;\r\n            int newStoneCount = stoneInInventory - stoneNeeded;\r\n            items.put(wood, newWoodCount);\r\n            items.put(stone, newStoneCount);\r\n            methodOfPaymentDescription = \"You used \" + woodNeeded + \" woods and \" + stoneNeeded + \" stones to build it\";\r\n        }\r\n        farm.getFarmBuildings().add(farmBuilding);\r\n\r\n        return new Result(true, \"A \" + farmBuildingType.getName() + \" has been built in \"\r\n                + position.toString() + \". \" + methodOfPaymentDescription);\r\n    }\r\n\r\n    public boolean canPlaceBuilding(Farm farm, FarmBuildingType farmBuildingType, Position position) {\r\n        int xTopLeft = position.getX();\r\n        int yTopLeft = position.getY();\r\n        for (int i = 0; i < farmBuildingType.getWidth(); i++) {\r\n            for (int j = 0; j < farmBuildingType.getLength(); j++) {\r\n                Position currentPosition = new Position(xTopLeft + i, yTopLeft + j);\r\n                if (!farm.getTileByPosition(currentPosition).getType().equals(TileType.NOT_PLOWED_GROUND)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public Result buyAnimal(String animalTypeStr, String name) {\r\n        AnimalType animalType = AnimalType.getAnimalTypeByName(animalTypeStr);\r\n        List<FarmBuildingType> livingSpaceTypes = animalType.getLivingSpaceTypes();\r\n        AnimalLivingSpace animalLivingSpace = getAvailableLivingSpace(livingSpaceTypes);\r\n\r\n        if (animalLivingSpace == null) {\r\n            return new Result(false, \"You don't have any available living spaces for a \"\r\n                    + animalType.getName() + \".\");\r\n        }\r\n\r\n        if (getAnimalByName(name) != null) {\r\n            return new Result(false, \"You already have an animal called \" + name + \".\");\r\n        }\r\n\r\n        if (App.getLoggedIn().getBalance() < animalType.getPrice()) {\r\n            return new Result(false, \"You do not have enough money to buy a \" +\r\n                    animalType.getName() + \".\");\r\n        }\r\n\r\n        App.getLoggedIn().changeBalance(animalType.getPrice());\r\n        Animal animal = new Animal(name, animalType, animalLivingSpace);\r\n        animalLivingSpace.addAnimal(animal);\r\n        return new Result(true, \"You bought a \" + animalType.getName() + \" called \" + name +\r\n                \" and housed it in a \" + animalLivingSpace.getFarmBuildingType().getName() + \".\");\r\n    }\r\n\r\n    public Result pet(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.changeFriendship(15);\r\n        animal.setLastPettingTime(App.getCurrentGame().getGameState().getTime());\r\n\r\n        return new Result(true, \"You pet your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \". Its' friendship level is now \" + animal.getFriendshipLevel() + \".\");\r\n    }\r\n\r\n    public void updateAnimals() { // TODO: call this method at the end of the day\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (!animal.hasBeenFedToday()) {\r\n                animal.changeFriendship(-20);\r\n            } else if (animal.getFriendshipLevel() >= 100) {\r\n                animal.produceProduct();\r\n            }\r\n\r\n            if (!animal.hasBeenPetToday()) {\r\n                animal.changeFriendship(-10);\r\n            }\r\n\r\n            if (animal.isOutside()) {\r\n                animal.changeFriendship(-20);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Result cheatSetFriendship(String animalName, String amountString) {\r\n        int amount;\r\n        if (!amountString.matches(\"\\\\d+\")) {\r\n            return new Result(false, \"Enter a number between 0 and 1000.\");\r\n        } else {\r\n            amount = Integer.parseInt(amountString);\r\n        }\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.setFriendshipLevel(amount);\r\n\r\n        return new Result(true, \"Friendship of your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \", has been set to \" + amount + \".\");\r\n    }\r\n\r\n    public Result showMyAnimalsInfo() {\r\n        StringBuilder message = new StringBuilder(\"Your animals: \\n\");\r\n\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n\r\n            message.append(\"-------------------------------\\n\").append(animal.getName()).append(\" (\").\r\n                    append(animal.getAnimalType().getName()).append(\"):\\n\").append(\"Friendship level: \").\r\n                    append(animal.getFriendshipLevel()).append(\"\\n\");\r\n\r\n            if (animal.hasBeenFedToday()) {\r\n                message.append(\"Has been fed today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been fed today.\\n\");\r\n            }\r\n\r\n            if (animal.hasBeenPetToday()) {\r\n                message.append(\"Has been pet today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been pet today.\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, message.toString());\r\n    }\r\n\r\n    public Result shepherdAnimal(String animalName, String xString, String yString) {\r\n        Position newPosition = getPositionByStrings(xString, yString);\r\n        if (newPosition == null) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        }\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        Farm farm = player.getFarm();\r\n        FarmBuilding farmBuildingInNewPosition = getFarmBuildingByPosition(newPosition);\r\n        if (animal.isOutside()) {\r\n            if (animal.getPosition().equals(newPosition)) {\r\n                return new Result(false, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                        + \", is already at \" + newPosition.toString());\r\n            }\r\n\r\n            if (!farm.getTileByPosition(newPosition).getType().equals(TileType.GRASS)) {\r\n                return new Result(false, \"Your animal can only go on grass.\");\r\n            }\r\n\r\n            if (farmBuildingInNewPosition != null) {\r\n                if (!farmBuildingInNewPosition.equals(animal.getAnimalLivingSpace())) {\r\n                    return new Result(false, \"Your animal can only go on grass.\");\r\n                }\r\n\r\n                animal.setPosition(newPosition);\r\n                animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n                animal.setOutside(false);\r\n                return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                        + \", has been moved to its' living space.\");\r\n            }\r\n\r\n            animal.setPosition(newPosition);\r\n            return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                    + \", has been moved to \" + newPosition.toString() + \".\");\r\n        }\r\n\r\n        if (farmBuildingInNewPosition != null) {\r\n            if (farmBuildingInNewPosition.equals(animal.getAnimalLivingSpace())) {\r\n                return new Result(false, \"Your animal is already in its' living space.\");\r\n            }\r\n\r\n            return new Result(false, \"Your animal can only go on grass.\");\r\n        }\r\n\r\n        animal.setPosition(newPosition);\r\n        animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n        animal.changeFriendship(8);\r\n        return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                + \", has been moved to \" + newPosition.toString() + \" and is now outside. Its' friendship level is now \"\r\n                + animal.getFriendshipLevel() + \".\");\r\n    }\r\n\r\n    public Position getPositionByStrings(String xString, String yString) {\r\n        if (!xString.matches(\"\\\\d+\") || !yString.matches(\"\\\\d+\")) {\r\n            return null;\r\n        }\r\n\r\n        int x, y;\r\n        x = Integer.parseInt(xString);\r\n        y = Integer.parseInt(xString);\r\n        return new Position(x, y);\r\n    }\r\n\r\n    public FarmBuilding getFarmBuildingByPosition(Position position) {\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            int xTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getX();\r\n            int yTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getY();\r\n            int length = farmBuilding.getLength();\r\n            int width = farmBuilding.getWidth();\r\n\r\n            int x = position.getX();\r\n            int y = position.getY();\r\n\r\n            if (xTopLeft < x && xTopLeft + length > x && yTopLeft < y && yTopLeft + width > y) {\r\n                return farmBuilding;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Result feedHayToAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n        return new Result(true, \"You fed hay to your \" + animal.getAnimalType().getName() + \", \"\r\n                + animalName + \".\");\r\n    }\r\n\r\n    public Result showProducedProducts() {\r\n        StringBuilder message = new StringBuilder(\"Uncollected animal products: \\n\");\r\n\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (!animal.getProducedProducts().isEmpty()) {\r\n                message.append(\"-------------------------------\\n\").append(animal.getName()).append(\" (\").\r\n                        append(animal.getAnimalType().getName()).append(\"):\\n\");\r\n\r\n                for (AnimalProduct product : animal.getProducedProducts()) {\r\n                    message.append(\"- \").append(product.getType().getName()).append(\"\\n\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(true, message.toString());\r\n    }\r\n\r\n    public Result collectProducts(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        AnimalType animalType = animal.getAnimalType();\r\n        ;\r\n        ArrayList<Item> items = new ArrayList<>(player.getBackpack().getItems().keySet());\r\n        HashMap<AnimalProduct, Integer> collectedProducts = new HashMap<>();\r\n\r\n        if (animalType.equals(AnimalType.COW)) {\r\n            MilkPail milkPail = null;\r\n            for (Item item : items) {\r\n                if (item instanceof MilkPail) {\r\n                    milkPail = (MilkPail) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (milkPail == null) {\r\n                return new Result(false, \"You need a milk pail to collect the cow's products.\");\r\n            }\r\n            milkPail.useTool(animal);\r\n        } else if (animalType.equals(AnimalType.GOAT)) {\r\n            MilkPail milkPail = null;\r\n            for (Item item : items) {\r\n                if (item instanceof MilkPail) {\r\n                    milkPail = (MilkPail) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (milkPail == null) {\r\n                return new Result(false, \"You need a milk pail to collect the goat's products.\");\r\n            } else {\r\n                milkPail.useTool(animal);\r\n            }\r\n        } else if (animalType.equals(AnimalType.SHEEP)) {\r\n            Shear shear = null;\r\n            for (Item item : items) {\r\n                if (item instanceof Shear) {\r\n                    shear = (Shear) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (shear == null) {\r\n                return new Result(false, \"You need a shear to collect the sheep's products.\");\r\n            } else {\r\n                shear.useTool(animal);\r\n            }\r\n        } else if (animalType.equals(AnimalType.PIG) && !animal.isOutside()) {\r\n            return new Result(false, \"Take the pig outside to collect its' products.\");\r\n        } else {\r\n            HashMap<Item, Integer> itemsHashMap = player.getBackpack().getItems();\r\n            for (AnimalProduct item : animal.getProducedProducts()) {\r\n                player.getBackpack().getItems().put(item, itemsHashMap.getOrDefault(item, 0) + 1);\r\n                collectedProducts.put(item, collectedProducts.getOrDefault(item, 0) + 1);\r\n            }\r\n            animal.setProducedProducts(new ArrayList<>());\r\n        }\r\n\r\n        StringBuilder message = new StringBuilder(\"You collected \");\r\n        for (AnimalProduct item : collectedProducts.keySet()) {\r\n            message.append(item.getType().getName()).append(\" (x\").append(collectedProducts.get(item)).append(\"), \");\r\n        }\r\n        return new Result(true, message.toString().replaceFirst(\", $\", \"\\n\"));\r\n    }\r\n\r\n    public Result sellAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        double price = animal.calculatePrice();\r\n        player.changeBalance(price);\r\n        animal.getAnimalLivingSpace().removeAnimal(animal);\r\n        return new Result(true, \"You sold your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \", for \" + price + \"g.\");\r\n    }\r\n\r\n    private Animal getAnimalByName(String name) {\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (animal.getName().equals(name)) {\r\n                return animal;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private ArrayList<Animal> getAllFarmAnimals() {\r\n        ArrayList<Animal> animals = new ArrayList<>();\r\n\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (farmBuilding.getFarmBuildingType().getIsCage() != null) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                animals.addAll(animalLivingSpace.getAnimals());\r\n            }\r\n        }\r\n\r\n        return animals;\r\n    }\r\n\r\n    public AnimalLivingSpace getAvailableLivingSpace(List<FarmBuildingType> livingSpaceTypes) {\r\n        Farm farm = player.getFarm();\r\n\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (livingSpaceTypes.contains(farmBuilding.getFarmBuildingType())) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                if (!animalLivingSpace.isFull()) {\r\n                    return animalLivingSpace;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // === FISHING === //\r\n\r\n    public Result fishing(String fishingRodName) {\r\n        FishingRod fishingRod = getFishingRodByName(fishingRodName);\r\n        if (fishingRod == null) {\r\n            return new Result(false, \"You do not have a \" + fishingRodName + \" fishing rod.\");\r\n        }\r\n\r\n        double M;\r\n        Weather currentWeather = App.getCurrentGame().getGameState().getCurrentWeather();\r\n        if (currentWeather.equals(Weather.SUNNY)) {\r\n            M = 1.5;\r\n        } else if (currentWeather.equals(Weather.RAINY)) {\r\n            M = 1.2;\r\n        } else {\r\n            M = 0.5;\r\n        }\r\n\r\n        Season currentSeason = App.getCurrentGame().getGameState().getTime().getSeason();\r\n\r\n        int fishingSkillLevel = player.getSkillLevels().get(Skill.FISHING).getNumber();\r\n        boolean canCatchLegendary = fishingSkillLevel == 4;\r\n\r\n        int numberOfCaughtFish = (int) Math.ceil(Math.random() * M * (fishingSkillLevel + 2));\r\n        HashMap<Item, Integer> itemsHashMap = player.getBackpack().getItems();\r\n        HashMap<Fish, Integer> caughtFish = new HashMap<>();\r\n        for (int i = 0; i < numberOfCaughtFish; i++) {\r\n            FishType fishType = FishType.getRandomFishType(currentSeason, canCatchLegendary);\r\n\r\n            double poleNumber = fishingRod.getRodType().getQualityNumber();\r\n            double qualityNumber = (Math.random() * (fishingSkillLevel + 2) * poleNumber) / (7 - M);\r\n            Quality quality = Quality.getQualityByNumber(qualityNumber);\r\n\r\n            Fish fish = new Fish(fishType, quality);\r\n            itemsHashMap.put(fish, itemsHashMap.getOrDefault(fish, 0) + 1);\r\n            caughtFish.put(fish, caughtFish.getOrDefault(fish, 0) + 1);\r\n        }\r\n\r\n        StringBuilder message = new StringBuilder(\"You caught \");\r\n        for (Fish fish : caughtFish.keySet()) {\r\n            message.append(fish.getType().getName()).append(\" (x\").append(caughtFish.get(fish)).append(\"), \");\r\n        }\r\n        return new Result(true, message.toString().replaceFirst(\", $\", \"\\n\"));\r\n    }\r\n\r\n    private FishingRod getFishingRodByName(String name) {\r\n        ArrayList<Item> items = new ArrayList<>(player.getBackpack().getItems().keySet());\r\n        for (Item item : items) {\r\n            if (item instanceof FishingRod fishingRod) {\r\n                if (fishingRod.getRodType().getName().equals(name)) {\r\n                    return fishingRod;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // === ARTISAN === //\r\n\r\n    public Result artisanUse(String artisanNamesString, String itemNamesString) {\r\n\r\n        ArrayList<ItemType> itemTypes = new ArrayList<>();\r\n        StringBuilder currentName = new StringBuilder();\r\n\r\n        for (char c : itemNamesString.toCharArray()) {\r\n            currentName.append(c);\r\n\r\n            for (ItemType item : ItemType.values()) {\r\n                if (item.name().equalsIgnoreCase(currentName.toString())) {\r\n                    itemTypes.add(item);\r\n                    currentName.setLength(0);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n\r\n    public Result artisanGet(String artisanName) { // gives product\r\n        // TODO: if product is not ready yet, return appropriate failing message\r\n\r\n        // TODO: get the product from artisan\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private Artisan getArtisanByArtisanName(String artisanName) {\r\n        for (ArtisanType type : ArtisanType.values()) {\r\n            if (type.name().equalsIgnoreCase(artisanName)) {\r\n                return new Artisan(type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Item getItemByItemName(String itemName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    // === SHOPS === //\r\n\r\n    public Result showAllProducts() {\r\n        if (shop == null) {\r\n            return new Result(false, \"Enter a shop first!\");\r\n        }\r\n        StringBuilder productList = new StringBuilder(\"All Products in \" + shopType.name() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shop.getType()) {\r\n                String availability = (product.getDailyLimit() == 0) ? \"Unavailable\" : \"Available\";\r\n                productList.append(String.format(\"- %s: %d gold (%s)\\n\", product.name(), product.getPrice(), availability));\r\n            }\r\n        }\r\n\r\n        return new Result(true, productList.toString());\r\n    }\r\n\r\n    public Result showAvailableProducts() {\r\n\r\n        StringBuilder availableProducts = new StringBuilder(\"Available Products in \" + shop.getType().getName() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shop.getType()) {\r\n                availableProducts.append(String.format(\"- %s: %d gold\\n\", product.name(), product.getPrice()));\r\n            }\r\n        }\r\n\r\n        return new Result(true, availableProducts.toString());\r\n    }\r\n\r\n\r\n    public Result purchase(String productName, String countStr) {\r\n        // count is optional and might be null. In that case:\r\n        int count;\r\n        if (countStr == null) {\r\n            count = 1;\r\n        } else {\r\n            count = Integer.parseInt(countStr);\r\n        }\r\n\r\n        Item product = getItemByItemName(productName);\r\n        // TODO: check if we have enough money\r\n        // TODO: check if the product is actually a valid product (not made up / invalid)\r\n        // TODO: check if the product is available\r\n        // TODO: check if the product has already been sold up to its daily limit (counts between different players)\r\n        // TODO: check if the given \"count\" is greater than the item's daily limit\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddDollars(String countStr) {\r\n        int count = Integer.parseInt(countStr);\r\n        player.changeBalance(count);\r\n        return new Result(true, \"You have \" + player.getBalance() + \"g now.\");\r\n    }\r\n\r\n    public Result sell(String productName, String countStr) {\r\n        // count is optional and might be null. In that case we sell the entire available in inventory\r\n        int count;\r\n        if (countStr == null) {\r\n            count = 0; // TODO: total num\r\n        } else {\r\n            count = Integer.parseInt(countStr);\r\n        }\r\n\r\n        // TODO: Check if such a product cannot be sold.\r\n        // TODO: Check if we do not have such a product.\r\n        // TODO: Check if we aren't neighbors with a shipping bin. (we have to be near shipping bin to sell)\r\n        // TODO: sell (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === FRIENDSHIPS === //\r\n\r\n    public Result showFriendshipLevels() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result talk(String username, String message) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTalkHistoryWithUser(String username) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveGift(String username, String itemName, String amountStr) {\r\n        int amount = Integer.parseInt(amountStr);\r\n        // TODO: check the error cases (from Doc page.48)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftRate(String giftNumberStr, String rateStr) {\r\n        int giftNumber = Integer.parseInt(giftNumberStr);\r\n        int rate = Integer.parseInt(rateStr);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result hug(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveFlowerToUser(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result askMarriage(String username, String ringStr) {\r\n        // TODO: ring object type!!? wtf\r\n        // TODO: will u marry me? :)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result respondToMarriageRequest(String acceptanceStr, String username) {\r\n        Boolean hasAccepted = null;\r\n        if (acceptanceStr.equalsIgnoreCase(\"accept\")) {\r\n            hasAccepted = true;\r\n        } else if (acceptanceStr.equalsIgnoreCase(\"reject\")) {\r\n            hasAccepted = false;\r\n        }\r\n\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TRADE === //\r\n\r\n    public Result tradeWithMoney(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeWithItem(String targetUsername, String type, String itemName, int amount, String targetItemName, int targetAmount) { // type?\r\n        // TODO: create a Trade class; int ID, User user1, User user2, Hashmap<Item, Integer>\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeList(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeResponse(int id) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeHistory() { // type?\r\n        // TODO:\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === NPC === //\r\n\r\n    public Result meetNPC(String NCPName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftNPC(String NCPName, String itemName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showFriendshipNPCList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showQuestsList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result finishQuest(int index) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private NPC getNPCByName(String NPCName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/GameController.java b/controllers/GameController.java
--- a/controllers/GameController.java	(revision 3976c56e247aff63864a66130fca9f58b4927dbe)
+++ b/controllers/GameController.java	(date 1746358478265)
@@ -1,6 +1,7 @@
 package controllers;
 
 import models.*;
+import models.enums.Menu;
 import models.enums.Quality;
 import models.enums.Skill;
 import models.enums.types.*;
@@ -968,6 +969,11 @@
 
     // === TRADE === //
 
+    public Result startTrade() {
+        App.setCurrentMenu(Menu.TARDE_MENU);
+        return new Result(true, "You are now in Trade Menu.");
+    }
+
     public Result tradeWithMoney(String targetUsername, String type, String itemName, int amount, int price) { // type?
         // TODO
         return new Result(true, "");
Index: models/enums/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums;\r\n\r\nimport views.*;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic enum Menu {\r\n    LOGIN_MENU(new LoginMenu(), \"Login Menu\"),\r\n    MAIN_MENU(new MainMenu(), \"Main Menu\"),\r\n    GAME_MENU(new GameMenu(), \"Game Menu\"),\r\n    PRE_GAME_MENU(new PreGameMenu(), \"Pre-Game Menu\"),\r\n    PROFILE_MENU(new ProfileMenu(), \"Profile Menu\"),\r\n    EXIT(new ExitMenu(), \"Exit\");\r\n\r\n    private final AppMenu menu;\r\n    private final String displayName;\r\n\r\n    Menu(AppMenu menu, String displayName) {\r\n        this.menu = menu;\r\n        this.displayName = displayName;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return displayName;\r\n    }\r\n\r\n    public void checkCommand(Scanner scanner) {\r\n        this.menu.check(scanner);\r\n    }\r\n\r\n    public static Menu getMenuFromDisplayName(String displayName) {\r\n        return switch (displayName) {\r\n            case \"Login Menu\" -> LOGIN_MENU;\r\n            case \"Main Menu\" -> MAIN_MENU;\r\n            case \"Profile Menu\" -> PROFILE_MENU;\r\n            case \"Game Menu\" -> GAME_MENU;\r\n            case \"Pre-Game Menu\" -> GAME_MENU;\r\n            case \"Exit\" -> EXIT;\r\n            default -> null;\r\n        };\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/enums/Menu.java b/models/enums/Menu.java
--- a/models/enums/Menu.java	(revision 3976c56e247aff63864a66130fca9f58b4927dbe)
+++ b/models/enums/Menu.java	(date 1746358466542)
@@ -10,6 +10,7 @@
     GAME_MENU(new GameMenu(), "Game Menu"),
     PRE_GAME_MENU(new PreGameMenu(), "Pre-Game Menu"),
     PROFILE_MENU(new ProfileMenu(), "Profile Menu"),
+    TARDE_MENU(new TradeMenu(), "Trade Menu"),
     EXIT(new ExitMenu(), "Exit");
 
     private final AppMenu menu;
@@ -35,7 +36,8 @@
             case "Main Menu" -> MAIN_MENU;
             case "Profile Menu" -> PROFILE_MENU;
             case "Game Menu" -> GAME_MENU;
-            case "Pre-Game Menu" -> GAME_MENU;
+            case "Pre-Game Menu" -> PRE_GAME_MENU;
+            case "Trade Menu" -> TARDE_MENU;
             case "Exit" -> EXIT;
             default -> null;
         };
Index: views/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\nimport controllers.GameController;\r\nimport models.enums.commands.GameCommands;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu implements AppMenu {\r\n    private final GameController controller = new GameController();\r\n    Matcher matcher;\r\n\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n        String inputLine = scanner.nextLine();\r\n        if ((matcher = GameCommands.ENERGY_SHOW.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showPlayerEnergy());\r\n        } else if ((matcher = GameCommands.CHEAT_ENERGY_SET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.setPlayerEnergy(matcher.group(\"value\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ENERGY_UNLIMITED.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.setUnlimitedEnergy());\r\n        } else if ((matcher = GameCommands.TOOLS_SHOW_CURRENT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showCurrentTool());\r\n        } else if ((matcher = GameCommands.COOKING_SHOW_RECIPES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showLearntCookingRecipes());\r\n        } else if ((matcher = GameCommands.CRAFTING_SHOW_RECIPES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showLearntCraftRecipes());\r\n        } else if ((matcher = GameCommands.INVENTORY_SHOW.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.inventoryShow());\r\n        } else if ((matcher = GameCommands.THROW_ITEM_TO_TRASH.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.throwItemToTrash(\r\n                    matcher.group(\"itemName\"),\r\n                    matcher.group(\"number\")\r\n            ));\r\n        } else if ((matcher = GameCommands.TOOLS_EQUIP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.equipTool(matcher.group(\"tool_name\")));\r\n        } else if ((matcher = GameCommands.TOOLS_USE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.useTool(matcher.group(\"direction\")));\r\n        } else if ((matcher = GameCommands.PLACE_ITEM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.placeItem(\r\n                    matcher.group(\"item_name\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.CRAFTING_CRAFT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.craft(matcher.group(\"item_name\")));\r\n        } else if ((matcher = GameCommands.CRAFT_INFO.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showCraftInfo(matcher.group(\"craft_name\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ADD_ITEM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAddItem(matcher.group(\"item_name\")));\r\n            // TODO: handle the optional \"count\" flag\r\n        } else if ((matcher = GameCommands.COOKING_PREPARE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.prepareCook(matcher.group(\"recipe_name\")));\r\n        } else if ((matcher = GameCommands.EAT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.eat(matcher.group(\"food_name\")));\r\n        } else if ((matcher = GameCommands.WALK.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.respondForWalkRequest(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.WALK_CONFIRM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.eat(matcher.group(\"y_or_n\")));\r\n        } else if ((matcher = GameCommands.PRINT_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.printMap(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\"),\r\n                    matcher.group(\"size\")\r\n            ));\r\n        } else if ((matcher = GameCommands.PRINT_COLORED_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.printMap(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\"),\r\n                    matcher.group(\"size\")\r\n            ));\r\n        } else if ((matcher = GameCommands.HELP_READING_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showHelpReadingMap());\r\n        } else if ((matcher = GameCommands.CHEAT_ADV_TIME.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAdvanceTime(matcher.group(\"hourIncrease\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ADV_DATE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAdvanceDate(matcher.group(\"dayIncrease\")));\r\n        } else if ((matcher = GameCommands.CHEAT_THOR.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatThor(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")));\r\n        } else if ((matcher = GameCommands.WEATHER.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showWeather());\r\n        } else if ((matcher = GameCommands.WEATHER_FORECAST.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showWeatherForecast());\r\n        } else if ((matcher = GameCommands.CHEAT_WEATHER_SET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatWeatherSet(matcher.group(\"type\")));\r\n        } else if ((matcher = GameCommands.GREENHOUSE_BUILD.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.buildGreenhouse());\r\n        } else if ((matcher = GameCommands.PLANT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.plant(\r\n                    matcher.group(\"seed\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.SHOW_PLANT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showPlant(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.FERTILIZE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.fertilize(\r\n                    matcher.group(\"fertilizer\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.BUILD.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.build(\r\n                    matcher.group(\"building_name\"),\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        }\r\n        // continue from \" buyAnimal \"\r\n        else if ((matcher = GameCommands.BUY_ANIMAL.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.buyAnimal(\r\n                    matcher.group(\"animal\"),\r\n                    matcher.group(\"animal_name\")\r\n            ));\r\n        } else if ((matcher = GameCommands.PET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.pet(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.CHEAT_SET_FRIENDSHIP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatSetFriendship(\r\n                    matcher.group(\"animal_name\"),\r\n                    matcher.group(\"amount\")\r\n            ));\r\n        } else if ((matcher = GameCommands.ANIMALS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showMyAnimalsInfo());\r\n        } else if ((matcher = GameCommands.SHEPHERD_ANIMALS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.shepherdAnimal(\r\n                    matcher.group(\"animal_name\"),\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.FEED_HAY.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.feedHayToAnimal(matcher.group(\"animal_name\")));\r\n        } else if ((matcher = GameCommands.PRODUCES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showProducedProducts());\r\n        } else if ((matcher = GameCommands.COLLECT_PRODUCE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.collectProducts(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.SELL_ANIMAL.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.sellAnimal(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.FISHING.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.fishing(matcher.group(\"fishing_pole\")));\r\n        } else if ((matcher = GameCommands.ARTISAN_USE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.artisanUse(\r\n                    matcher.group(\"artisan_name\"),\r\n                    matcher.group(\"items_names\")\r\n            ));\r\n        } else if ((matcher = GameCommands.ARTISAN_GET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.artisanGet(matcher.group(\"artisan_name\")));\r\n        } else if ((matcher = GameCommands.SHOW_ALL_PRODUCTS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showAllProducts());\r\n        } else if ((matcher = GameCommands.SHOW_ALL_AVAILABLE_PRODUCTS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showAvailableProducts());\r\n        } else if ((matcher = GameCommands.PURCHASE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.purchase(\r\n                    matcher.group(\"product_name\"),\r\n                    matcher.group(\"count\")\r\n            ));\r\n        } else if ((matcher = GameCommands.CHEAT_ADD_DOLLARS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAddDollars(matcher.group(\"count\")));\r\n\r\n        } else if ((matcher = GameCommands.SELL.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.sell(\r\n                    matcher.group(\"product_name\"),\r\n                    matcher.group(\"count\")\r\n            ));\r\n        } else if ((matcher = GameCommands.FRIENDSHIPS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showFriendshipLevels());\r\n        } else if ((matcher = GameCommands.TALK.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.talk(\r\n                    matcher.group(\"username\"),\r\n                    matcher.group(\"message\")\r\n            ));\r\n        } else if ((matcher = GameCommands.TALK_HISTORY.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showTalkHistoryWithUser(matcher.group(\"username\")));\r\n        } else if ((matcher = GameCommands.GIFT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.giveGift(\r\n                    matcher.group(\"username\"),\r\n                    matcher.group(\"item\"),\r\n                    matcher.group(\"amount\")\r\n            ));\r\n        } else if ((matcher = GameCommands.GIFT_LIST.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.giftList());\r\n        } else if ((matcher = GameCommands.GIFT_RATE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.giftRate(\r\n                    matcher.group(\"gift_number\"),\r\n                    matcher.group(\"rate\")\r\n            ));\r\n        } else if ((matcher = GameCommands.HUG.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.hug(matcher.group(\"username\")));\r\n        } else if ((matcher = GameCommands.FLOWER.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.giveFlowerToUser(matcher.group(\"username\")));\r\n        } else if ((matcher = GameCommands.ASK_MARRIAGE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.askMarriage(\r\n                    matcher.group(\"username\"),\r\n                    matcher.group(\"ring\")));\r\n        } else if ((matcher = GameCommands.RESPONSE_MARRIAGE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.respondToMarriageRequest(\r\n                    matcher.group(\"response\"),\r\n                    matcher.group(\"username\")\r\n            ));\r\n        }\r\n        else if ((matcher = GameCommands.TRADE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.trade);\r\n        }\r\n        else {\r\n            System.out.println(\"Invalid Command. Please try again!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/GameMenu.java b/views/GameMenu.java
--- a/views/GameMenu.java	(revision 3976c56e247aff63864a66130fca9f58b4927dbe)
+++ b/views/GameMenu.java	(date 1746358475608)
@@ -203,7 +203,7 @@
             ));
         }
         else if ((matcher = GameCommands.TRADE.getMatcher(inputLine)) != null) {
-            System.out.println(controller.trade);
+            System.out.println(controller.startTrade());
         }
         else {
             System.out.println("Invalid Command. Please try again!");
Index: views/TradeMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/TradeMenu.java b/views/TradeMenu.java
new file mode 100644
--- /dev/null	(date 1746358271502)
+++ b/views/TradeMenu.java	(date 1746358271502)
@@ -0,0 +1,11 @@
+package views;
+
+import java.util.Scanner;
+
+public class TradeMenu implements AppMenu {
+
+    @Override
+    public void check(Scanner scanner) {
+
+    }
+}
