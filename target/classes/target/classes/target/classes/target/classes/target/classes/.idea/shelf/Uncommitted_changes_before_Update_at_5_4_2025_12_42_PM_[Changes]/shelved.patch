Index: controllers/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.*;\r\nimport models.enums.types.*;\r\nimport models.enums.types.FarmBuildingType;\r\nimport models.tools.Tool;\r\nimport models.enums.environment.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    User player = App.getLoggedIn();\r\n    Game game = App.getCurrentGame();\r\n\r\n    // === PLAYER'S STATUS === //\r\n\r\n    public Result showPlayerEnergy() {\r\n        int playerEnergy = player.getEnergy();\r\n        return new Result(true, \"Your energy is: \" + playerEnergy);\r\n    }\r\n\r\n    public Result setPlayerEnergy(String energyAmountStr) {\r\n        int energyAmount = Integer.parseInt(energyAmountStr);\r\n\r\n        player.setEnergy(energyAmount);\r\n        return new Result(true, \"Energy set to \" + energyAmount);\r\n    }\r\n\r\n    public Result setUnlimitedEnergy() {\r\n        player.setEnergyUnlimited(true);\r\n        return new Result(true, \"Unlimited Energy activated!\");\r\n    }\r\n\r\n    public Result faint() {\r\n        player.faint();\r\n        return new Result(true, \"\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result showCurrentTool() {\r\n        Tool playerCurrentTool = player.getCurrentTool();\r\n        return new Result(true, \"Your tool is: \" + playerCurrentTool.toString()); // todo: is message OK?\r\n    }\r\n\r\n    public Result showLearntCookingRecipes() {\r\n        String learntRecipes = player.getStringLearntCookingRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    public Result showLearntCraftRecipes() {\r\n        String learntRecipes = player.getStringLearntCraftRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    // === INVENTORY === //\r\n    public Result inventoryShow() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result throwItemToTrash(String itemName, String numberStr) {\r\n        // command: inventory trash ...\r\n        // TODO: get Item from name\r\n        // TODO: get number from numStr\r\n        // TODO: throw away\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TOOLS, FOODS, ITEMS, AND CRAFTS === //\r\n\r\n    public Result equipTool(String toolName) {\r\n        // TODO: get Tool by its name (return appropriate failing message if null)\r\n        // TODO: equip tool\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result useTool(String directionString) {\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n        Position position = neighborTile(direction);\r\n        Tool tool = player.getCurrentTool();\r\n        if (canToolBeUsedHere(position, tool)) {\r\n            tool.useTool(direction);\r\n            return new Result(true, \"\"); // todo: appropriate message\r\n        }\r\n        return new Result(false, \"You can't use that tool in that direction\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result placeItem(String itemName, String directionString) {\r\n        Item item = getItemByItemName(itemName);\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n\r\n        Position position = neighborTile(direction);\r\n        if (canItemBePlacedHere(position, item)) {\r\n            // TODO: place item\r\n            // TODO: LEARN ABOUT assert position != null;\r\n            return new Result(true, item + \" placed at \" + position.toString());\r\n        }\r\n        return new Result(false, \"you can't place that item at \" + position.toString());\r\n\r\n    }\r\n\r\n    public Result craft(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        if (!canCraft(item)) {\r\n            return new Result(false, \"Not possible to craft that item!\");\r\n        }\r\n        // TODO: craft item and add it to inventory.\r\n        return new Result(true, \"Item crafted and added to inventory.\");\r\n    }\r\n\r\n    public Result showCraftInfo(String craftName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddItem(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        // TODO: handle the optional \"count\" flag\r\n        // TODO: add item to inventory\r\n        return new Result(true, \"Item added to inventory.\");\r\n    }\r\n\r\n    // or name it cook() ?\r\n    public Result prepareCook(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        if (!canCook(food)) {\r\n            return new Result(false, \"You cannot cook this right now.\");\r\n            // todo: or specify the cause of the error...\r\n        }\r\n        // TODO: cook and add to inventory\r\n        return new Result(true, \"Yummy! Your meal is ready.\");\r\n    }\r\n\r\n    public Result eat(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        // TODO: check if player HAS the food, and return appropriate Result if not.\r\n        // TODO: increase energy\r\n        // TODO: apply buff\r\n        player.eat(food.getName());\r\n        return new Result(true, \"\"); // todo: return appropriate Result (list the buff, etc. ?)\r\n    }\r\n\r\n    private boolean canCraft(Item item) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canCook(FoodType food) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canToolBeUsedHere(Position position, Tool tool) {\r\n        // TODO: check the tile at \"position\" and check if tool can be used!\r\n        return false;\r\n    }\r\n\r\n    private boolean canItemBePlacedHere(Position position, Item item) {\r\n        // TODO: check the tile at \"position\" and check if item can be placed there!\r\n        return false;\r\n    }\r\n\r\n    private Position neighborTile(Direction direction) {\r\n        // TODO: return the position of the neighbour tile, if within the range of our map of farms.\r\n        return null;\r\n    }\r\n\r\n    private Tile getTileByPosition(Position position) {\r\n        // TODO: loop (the entire map) and return the tile whose position equals \"position\".\r\n        return null;\r\n    }\r\n\r\n\r\n    // === WALK === //\r\n\r\n    public Result walk(Path path, String walkConfirmation) {\r\n        Boolean playerConfirmed = switch (walkConfirmation) {\r\n            case \"y\" -> true;\r\n            case \"n\" -> false;\r\n            default -> null;\r\n        };\r\n        if (playerConfirmed == null) {\r\n            return new Result(false, \"the confirmation must be \\\"y\\\" or \\\"n\\\"\");\r\n        }\r\n        if (!playerConfirmed) {\r\n            return new Result(false, \"You denied the walk.\");\r\n        }\r\n        // TODO: Walk path! i.e. call player's inner changePosition(x,y) method.\r\n        Position destination = path.getPathTiles().getLast();\r\n        player.changePosition(destination);\r\n        return new Result(true, \"Walking...\");\r\n    }\r\n\r\n    public Result respondForWalkRequest(String xString, String yString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        Position destination = new Position(x, y);\r\n        Position origin = player.getPosition();\r\n        Path path = findValidPath(origin, destination);\r\n        if (path == null) {\r\n            return new Result(false, \"No valid path found!\");\r\n        }\r\n        StringBuilder walkConfirmRequest = new StringBuilder();\r\n        walkConfirmRequest\r\n                .append(\"Do you confirm the walk?\\n\")\r\n                .append(\"(respond with \\\"walk confirm\\\" followed by \\\"y\\\" or \\\"n\\\"\");\r\n        return new Result(true, walkConfirmRequest.toString());\r\n        // [we can also show the path and then ask for confirmation]\r\n\r\n        /*\r\n        In View: after calling this method, we expect the player to confirm/deny\r\n        Then, we call the walk() method.\r\n        */\r\n    }\r\n\r\n    private Path findValidPath(Position origin, Position destination) {\r\n        // give FarmsMap as argument?\r\n        if (!isDestinationAllowed(destination)) {\r\n            return null;\r\n        }\r\n        // TODO: build a valid path and return it\r\n        return new Path();\r\n    }\r\n\r\n    private boolean isDestinationAllowed(Position destination) {\r\n        // TODO: check if destination is in OUR Farm.\r\n        return false;\r\n    }\r\n\r\n    // === PRINT MAP === //\r\n\r\n    public Result printMap(String xString, String yString, String sizeString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        int size = Integer.parseInt(sizeString);\r\n        return new Result(true, \"\"); // TODO: print map.\r\n    }\r\n\r\n    public Result printColoredMap() {\r\n        return new Result(true, \"\"); // TODO: print a colored map.\r\n    }\r\n\r\n    public Result showHelpReadingMap() {\r\n        return new Result(true, \"\"); // TODO: show the \"Help\" / enter the Help menu / ...\r\n    }\r\n\r\n\r\n    // === GAME STATUS === //\r\n\r\n    public Result cheatAdvanceTime(String howManyHoursString) {\r\n        int howManyHours = Integer.parseInt(howManyHoursString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAdvanceDate(String howManyDaysString) {\r\n        int howManyDays = Integer.parseInt(howManyDaysString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatThor(String x, String y) {\r\n        Position position = new Position(Integer.parseInt(x), Integer.parseInt(y));\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeather() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeatherForecast() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatWeatherSet(String newWeatherString) {\r\n        // TODO : get weather type from name\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result buildGreenhouse() {\r\n        if (!canBuildGreenhouse()) {\r\n            return new Result(false, \"You can't build greenhouse!\");\r\n        }\r\n        // TODO: build a greenhouse\r\n        return new Result(true, \"Building greenhouse...\"); // todo: show its info in detail?\r\n    }\r\n\r\n    private boolean canBuildGreenhouse() {\r\n        // TODO: check if we have the required material\r\n        // + is only ONE greenhouse allowed?\r\n        return false;\r\n    }\r\n\r\n\r\n    // === PLANTS === //\r\n\r\n    public Result plant(String seedName, String directionName) {\r\n        // TODO: get Seed from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showPlant(String xString, String yString) {\r\n        Position position = new Position(Integer.parseInt(xString), Integer.parseInt(yString));\r\n        Tile tile = getTileByPosition(position);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result fertilize(String fertilizerName, String directionName) {\r\n        // TODO : get FertilizerType from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        // TODO: fertilize\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === FARM BUILDINGS & ANIMALS === //\r\n\r\n    public Result build(String farmBuildingTypeString, String xString, String yString) {\r\n        FarmBuildingType farmBuildingType = FarmBuildingType.getFarmBuildingTypeByName(farmBuildingTypeString);\r\n        int x, y;\r\n        if (!xString.matches(\"\\\\d+\") || !yString.matches(\"\\\\d+\")) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        } else {\r\n            x = Integer.parseInt(xString);\r\n            y = Integer.parseInt(xString);\r\n        }\r\n\r\n        Position position = new Position(x, y);\r\n\r\n        Farm farm = player.getFarm();\r\n        FarmBuilding farmBuilding = new FarmBuilding(farmBuildingType, position);\r\n\r\n        boolean canPlace = canPlaceBuilding(farm, farmBuildingType, position);\r\n\r\n        if (!canPlace) {\r\n            return new Result(false, \"Can't build a \" + farmBuildingType.getName() +\r\n                    \" in this position, because the ground is not empty.\");\r\n        }\r\n\r\n        HashMap<Item, Integer> items = player.getBackpack().getItems();\r\n        Material wood = new Material(MaterialType.WOOD);\r\n        Material stone = new Material(MaterialType.STONE);\r\n        int woodInInventory = items.get(wood);\r\n        int stoneInInventory = items.get(stone);\r\n        int woodNeeded = farmBuildingType.getWoodCount();\r\n        int stoneNeeded = farmBuildingType.getStoneCount();\r\n        boolean enoughSupplies = (woodNeeded <= woodInInventory) && (stoneNeeded <= stoneInInventory);\r\n\r\n        double cost = farmBuildingType.getCost();\r\n        boolean enoughMoney = player.getBalance() >= cost;\r\n\r\n        if (!enoughSupplies && !enoughMoney) {\r\n            return new Result(false, \"You don't have enough supplies or money to build a \"\r\n                    + farmBuildingType.getName());\r\n        }\r\n\r\n        String methodOfPaymentDescription;\r\n        if (!enoughSupplies) {\r\n            player.changeBalance(cost);\r\n            methodOfPaymentDescription = \"You payed \" + cost + \"g to build it.\";\r\n        } else {\r\n            int newWoodCount = woodInInventory - woodNeeded;\r\n            int newStoneCount = stoneInInventory - stoneNeeded;\r\n            items.put(wood, newWoodCount);\r\n            items.put(stone, newStoneCount);\r\n            methodOfPaymentDescription = \"You used \" + woodNeeded + \" woods and \" + stoneNeeded + \" stones to build it\";\r\n        }\r\n        farm.getFarmBuildings().add(farmBuilding);\r\n\r\n        return new Result(true, \"A \" + farmBuildingType.getName() + \" has been built in \"\r\n                + position.toString() + \". \" + methodOfPaymentDescription);\r\n    }\r\n\r\n    public boolean canPlaceBuilding(Farm farm, FarmBuildingType farmBuildingType, Position position) {\r\n        int xTopLeft = position.getX();\r\n        int yTopLeft = position.getY();\r\n        for (int i = 0; i < farmBuildingType.getWidth(); i++) {\r\n            for (int j = 0; j < farmBuildingType.getLength(); j++) {\r\n                Position currentPosition = new Position(xTopLeft + i, yTopLeft + j);\r\n                if (!farm.getTileByPosition(currentPosition).getType().equals(TileType.NOT_PLOWED_GROUND)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public Result buyAnimal(AnimalType animalType, String name) {\r\n        List<FarmBuildingType> livingSpaceTypes = animalType.getLivingSpaceTypes();\r\n        AnimalLivingSpace animalLivingSpace = getAvailableLivingSpace(livingSpaceTypes);\r\n\r\n        if (animalLivingSpace == null) {\r\n            return new Result(false, \"You don't have any available living spaces for a \"\r\n                    + animalType.getName() + \".\");\r\n        }\r\n\r\n        if (getAnimalByName(name) != null) {\r\n            return new Result(false, \"You already have an animal called \" + name + \".\");\r\n        }\r\n\r\n        if (App.getLoggedIn().getBalance() < animalType.getPrice()) {\r\n            return new Result(false, \"You do not have enough money to buy a \" +\r\n                    animalType.getName() + \".\");\r\n        }\r\n\r\n        App.getLoggedIn().changeBalance(animalType.getPrice());\r\n        Animal animal = new Animal(name, animalType, animalLivingSpace);\r\n        animalLivingSpace.addAnimal(animal);\r\n        return new Result(true, \"You bought a \" + animalType.getName() + \" called \" + name +\r\n                \" and housed it in a \" + animalLivingSpace.getFarmBuildingType().getName() + \".\");\r\n    }\r\n\r\n    public Result pet(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.changeFriendship(15);\r\n        animal.setLastPettingTime(App.getCurrentGame().getGameState().getTime());\r\n\r\n        return new Result(true, \"You pet your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \". Its' friendship level is now \" + animal.getFriendshipLevel() + \".\");\r\n    }\r\n\r\n    public void updateAnimalFriendships() { // TODO: call this method at the end of the day\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (!animal.hasBeenFedToday()) {\r\n                animal.changeFriendship(-20);\r\n            }\r\n\r\n            if (!animal.hasBeenPetToday()) {\r\n                animal.changeFriendship(-10);\r\n            }\r\n\r\n            // TODO: check if animal is not inside its' living space at the end of the night\r\n        }\r\n    }\r\n\r\n    public Result cheatSetFriendship(String animalName, String amountString) {\r\n        int amount;\r\n        if (!amountString.matches(\"\\\\d+\")) {\r\n            return new Result(false, \"Enter a number between 0 and 1000.\");\r\n        } else {\r\n            amount = Integer.parseInt(amountString);\r\n        }\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.setFriendshipLevel(amount);\r\n\r\n        return new Result(true, \"Friendship of your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \", has been set to \" + amount + \".\");\r\n    }\r\n\r\n    public Result showMyAnimalsInfo() {\r\n        StringBuilder message = new StringBuilder(\"Your animals: \\n\");\r\n\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n\r\n            message.append(\"-------------------------------\\n\").append(animal.getName()).append(\" (\").\r\n                    append(animal.getAnimalType().getName()).append(\"):\\n\").append(\"Friendship level: \").\r\n                    append(animal.getFriendshipLevel()).append(\"\\n\");\r\n\r\n            if (animal.hasBeenFedToday()) {\r\n                message.append(\"Has been fed today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been fed today.\\n\");\r\n            }\r\n\r\n            if (animal.hasBeenPetToday()) {\r\n                message.append(\"Has been pet today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been pet today.\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, message.toString());\r\n    }\r\n\r\n    public Result shepherdAnimal(String animalName, String xString, String yString) {\r\n        int x, y;\r\n        if (!xString.matches(\"\\\\d+\") || !yString.matches(\"\\\\d+\")) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        } else {\r\n            x = Integer.parseInt(xString);\r\n            y = Integer.parseInt(xString);\r\n        }\r\n\r\n        Position newPosition = new Position(x, y);\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        Farm farm = player.getFarm();\r\n        if (animal.isOutside()) {\r\n            if (animal.getPosition().equals(newPosition)) {\r\n                return new Result(false, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                        + \", is already at \" + newPosition.toString());\r\n            }\r\n\r\n            if (!farm.getTileByPosition(newPosition).getType().equals(TileType.GRASS)) {\r\n                return new Result(false, \"Your animal can only go on grass.\");\r\n            }\r\n\r\n            animal.setPosition(newPosition);\r\n            animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n            return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                    + \", has been moved to \" + newPosition.toString() + \".\");\r\n        }\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public FarmBuilding getFarmBuildingByPosition(Position position) {\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            int xTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getX();\r\n            int yTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getY();\r\n            int length = farmBuilding.getLength();\r\n            int width = farmBuilding.getWidth();\r\n\r\n            int x = position.getX();\r\n            int y = position.getY();\r\n\r\n            if (xTopLeft < x && xTopLeft + length > x && yTopLeft < y && yTopLeft + width > y) {\r\n                return farmBuilding;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Result feedHayToAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showProducedProducts() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result collectProducts(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result sellAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private Animal getAnimalByName(String name) {\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (animal.getName().equals(name)) {\r\n                return animal;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private ArrayList<Animal> getAllFarmAnimals() {\r\n        ArrayList<Animal> animals = new ArrayList<>();\r\n\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (farmBuilding.getFarmBuildingType().getIsCage() != null) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                animals.addAll(animalLivingSpace.getAnimals());\r\n            }\r\n        }\r\n\r\n        return animals;\r\n    }\r\n\r\n    public AnimalLivingSpace getAvailableLivingSpace(List<FarmBuildingType> livingSpaceTypes) {\r\n        Farm farm = player.getFarm();\r\n\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (livingSpaceTypes.contains(farmBuilding.getFarmBuildingType())) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                if (!animalLivingSpace.isFull()) {\r\n                    return animalLivingSpace;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // === FISHING === //\r\n\r\n    public Result fishing(String fishingRodName) {\r\n        Tool fishingRod = getFishingRodByName(fishingRodName);\r\n        // TODO: only fish if near lake and fishingPole is not null\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public int numberOfCaughtFish() {\r\n        // TODO\r\n        return 0;\r\n    }\r\n\r\n    public int qualityOfCaughtFish() {\r\n        // TODO\r\n        return 0;\r\n    }\r\n\r\n    private Tool getFishingRodByName(String name) {\r\n        // TODO: find fishing pole\r\n        return null;\r\n    }\r\n\r\n    // === ARTISAN === //\r\n\r\n    public Result artisanUse(String artisanName, ArrayList<String> itemsNames) { // gets ingredients\r\n        ArrayList<Item> ingredientItems = new ArrayList<>();\r\n        for (String itemName : itemsNames) {\r\n            ingredientItems.add(getItemByItemName(itemName));\r\n        }\r\n        Artisan artisan = getArtisanByArtisanName(artisanName);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result artisanGet(String artisanName) { // gives product\r\n        // TODO: if product is not ready yet, return appropriate failing message\r\n\r\n        // TODO: get the product from artisan\r\n\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private Artisan getArtisanByArtisanName(String artisanName) {\r\n        for (ArtisanType type : ArtisanType.values()) {\r\n            if (type.name().equalsIgnoreCase(artisanName)) {\r\n                return new Artisan(type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    private Item getItemByItemName(String itemName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    // === SHOPS === //\r\n\r\n    public Result showAllProducts(ShopType shopType) {\r\n        StringBuilder productList = new StringBuilder(\"All Products in \" + shopType.name() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shopType) {\r\n                String availability = (product.getDailyLimit() == 0) ? \"Unavailable\" : \"Available\";\r\n                productList.append(String.format(\"- %s: %d gold (%s)\\n\", product.name(), product.getPrice(), availability));\r\n            }\r\n        }\r\n\r\n        return new Result(true, productList.toString());\r\n    }\r\n\r\n    public Result showAvailableProducts(ShopType shopType) {\r\n        StringBuilder availableProducts = new StringBuilder(\"Available Products in \" + shopType.name() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shopType) {\r\n                availableProducts.append(String.format(\"- %s: %d gold\\n\", product.name(), product.getPrice()));\r\n            }\r\n        }\r\n\r\n        return new Result(true, availableProducts.toString());\r\n    }\r\n\r\n\r\n    public Result purchase(String productName, Integer count) {\r\n        // count is optional and might be null. In that case:\r\n        if (count == null) {\r\n            count = 1;\r\n        }\r\n        Item product = getItemByItemName(productName);\r\n        // TODO: check if we have enough money\r\n        // TODO: check if the product is actually a valid product (not made up / invalid)\r\n        // TODO: check if the product is available\r\n        // TODO: check if the product has already been sold up to its daily limit (counts between different players)\r\n        // TODO: check if the given \"count\" is greater than the item's daily limit\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddDollars(int amount, User currentUser) {\r\n        currentUser.setBalance(amount);\r\n        return new Result(true, \"User has \" + amount + \"dollars now.\");\r\n    }\r\n\r\n    public Result sell(String productName, Integer count) {\r\n        // count is optional and might be null. In that case we sell the entire available in inventory\r\n        if (count == null) {\r\n            // TODO: count = total num of that product in our inventory\r\n        }\r\n        // TODO: Check if such a product cannot be sold.\r\n        // TODO: Check if we do not have such a product.\r\n        // TODO: Check if we aren't neighbors with a shipping bin. (we have to be near shipping bin to sell)\r\n        // TODO: sell (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === FRIENDSHIPS === //\r\n\r\n    public Result showFriendshipLevels() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result talk(String username, String message) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTalkHistoryWithUser(String username) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveGift(String username, String itemName, int amount) {\r\n        // TODO: check the error cases (from Doc page.48)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftRate(int giftNumber, int rate) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result hug(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveFlowerToUser(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result askMarriage(String username, Object ring) {\r\n        // TODO: ring object type!!?\r\n        // TODO: will u marry me? :)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result respondToMarriageRequest(boolean accepted, String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TRADE === //\r\n\r\n    public Result tradeWithMoney(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeWithItem(String targetUsername, String type, String itemName, int amount, String targetItemName, int targetAmount) { // type?\r\n        // TODO: create a Trade class; int ID, User user1, User user2, Hashmap<Item, Integer>\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeList(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeResponse(int id) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeHistory() { // type?\r\n        // TODO:\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === NPC === //\r\n\r\n    public Result meetNPC(String NCPName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftNPC(String NCPName, String itemName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showFriendshipNPCList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showQuestsList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result finishQuest(int index) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private NPC getNPCByName(String NPCName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    private FoodType getFoodTypeByName(String FoodTypeName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/GameController.java b/controllers/GameController.java
--- a/controllers/GameController.java	(revision f4300448b7afc91b5f1b5b6987ea037264a34170)
+++ b/controllers/GameController.java	(date 1746086508897)
@@ -833,9 +833,5 @@
         // TODO
         return null;
     }
-
-    private FoodType getFoodTypeByName(String FoodTypeName) {
-        // TODO
-        return null;
-    }
+    FoodType
 }
\ No newline at end of file
Index: models/enums/types/FoodType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums.types;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic enum FoodType implements ItemType {\r\n    FRIED_EGG(\"Fried Egg\", createIngredientsMap(IngredientType.EGG, 1), 50, \"\", \"Starter\", 35),\r\n    BAKED_FISH(\"Baked Fish\", createIngredientsMap(IngredientType.SARDINE, 1, IngredientType.SALMON, 1, IngredientType.WHEAT, 1), 75, \"\", \"Starter\", 100),\r\n    SALAD(\"Salad\", createIngredientsMap(IngredientType.LEEK, 1, IngredientType.DANDELION, 1), 113, \"\", \"Starter\", 110),\r\n    OMELET(\"Omelet\", createIngredientsMap(IngredientType.EGG, 1, IngredientType.MILK, 1), 100, \"\", \"Stardrop Saloon\", 125),\r\n    PUMPKIN_PIE(\"Pumpkin Pie\", createIngredientsMap(IngredientType.PUMPKIN, 1, IngredientType.WHEAT_FLOUR, 1, IngredientType.MILK, 1, IngredientType.SUGAR, 1), 225, \"\", \"Stardrop Saloon\", 385),\r\n    SPAGHETTI(\"Spaghetti\", createIngredientsMap(IngredientType.WHEAT_FLOUR, 1, IngredientType.TOMATO, 1), 75, \"\", \"Stardrop Saloon\", 120),\r\n    PIZZA(\"Pizza\", createIngredientsMap(IngredientType.WHEAT_FLOUR, 1, IngredientType.TOMATO, 1, IngredientType.CHEESE, 1), 150, \"\", \"Stardrop Saloon\", 300),\r\n    TORTILLA(\"Tortilla\", createIngredientsMap(IngredientType.CORN, 1), 50, \"\", \"Stardrop Saloon\", 50),\r\n    MAKI_ROLL(\"Maki Roll\", createIngredientsMap(IngredientType.ANY_FISH, 1, IngredientType.RICE, 1, IngredientType.FIBER, 1), 100, \"\", \"Stardrop Saloon\", 220),\r\n    TRIPLE_SHOT_ESPRESSO(\"Triple Shot Espresso\", createIngredientsMap(IngredientType.COFFEE, 3), 200, \"Max Energy + 100 (5 hours)\", \"Stardrop Saloon\", 450),\r\n    COOKIE(\"Cookie\", createIngredientsMap(IngredientType.WHEAT_FLOUR, 1, IngredientType.SUGAR, 1, IngredientType.EGG, 1), 90, \"\", \"Stardrop Saloon\", 140),\r\n    HASH_BROWNS(\"Hash Browns\", createIngredientsMap(IngredientType.POTATO, 1, IngredientType.OIL, 1), 90, \"Farming (5 hours)\", \"Stardrop Saloon\", 120),\r\n    PANCAKES(\"Pancakes\", createIngredientsMap(IngredientType.WHEAT_FLOUR, 1, IngredientType.EGG, 1), 90, \"Foraging (11 hours)\", \"Stardrop Saloon\", 80),\r\n    FRUIT_SALAD(\"Fruit Salad\", createIngredientsMap(IngredientType.BLUEBERRY, 1, IngredientType.MELON, 1, IngredientType.APRICOT, 1), 263, \"\", \"Stardrop Saloon\", 450),\r\n    RED_PLATE(\"Red Plate\", createIngredientsMap(IngredientType.RED_CABBAGE, 1, IngredientType.RADISH, 1), 240, \"Max Energy +50 (3 hours)\", \"Stardrop Saloon\", 400),\r\n    BREAD(\"Bread\", createIngredientsMap(IngredientType.WHEAT_FLOUR, 1), 50, \"\", \"Stardrop Saloon\", 60),\r\n    SALMON_DINNER(\"Salmon Dinner\", createIngredientsMap(IngredientType.SALMON, 1, IngredientType.AMARANTH, 1, IngredientType.KALE, 1), 125, \"\", \"Leah Reward\", 300),\r\n    VEGETABLE_MEDLEY(\"Vegetable Medley\", createIngredientsMap(IngredientType.TOMATO, 1, IngredientType.BEET, 1), 165, \"\", \"Foraging Level 2\", 120),\r\n    FARMERS_LUNCH(\"Farmer's Lunch\", createIngredientsMap(IngredientType.OMELET, 1, IngredientType.PARSNIP, 1), 200, \"Farming (5 hours)\", \"Farming level 1\", 150),\r\n    SURVIVAL_BURGER(\"Survival Burger\", createIngredientsMap(IngredientType.BREAD, 1, IngredientType.CARROT, 1, IngredientType.EGGPLANT, 1), 125, \"Foraging (5 hours)\", \"Foraging level 3\", 180),\r\n    DISH_O_THE_SEA(\"Dish O' the Sea\", createIngredientsMap(IngredientType.SARDINE, 2, IngredientType.HASH_BROWNS, 1), 150, \"Fishing (5 hours)\", \"Fishing level 2\", 220),\r\n    SEAFORM_PUDDING(\"Seafoam Pudding\", createIngredientsMap(IngredientType.FLOUNDER, 1, IngredientType.MIDNIGHT_CARP, 1), 175, \"Fishing (10 hours)\", \"Fishing level 3\", 300),\r\n    MINERS_TREAT(\"Miner's Treat\", createIngredientsMap(IngredientType.CARROT, 2, IngredientType.SUGAR, 1, IngredientType.MILK, 1), 125, \"Mining (5 hours)\", \"Mining level 1\", 200);\r\n\r\n    private final String name;\r\n    private final HashMap<IngredientType, Integer> ingredients;\r\n    private final int energy;\r\n    private final String buff;\r\n    private final String source;\r\n    private final int sellPrice;\r\n\r\n    FoodType(String name, HashMap<IngredientType, Integer> ingredients, int energy, String buff, String source, int sellPrice) {\r\n        this.name = name;\r\n        this.ingredients = ingredients;\r\n        this.energy = energy;\r\n        this.buff = buff;\r\n        this.source = source;\r\n        this.sellPrice = sellPrice;\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public HashMap<IngredientType, Integer> getIngredients() {\r\n        return ingredients;\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n\r\n    public String getBuff() {\r\n        return buff;\r\n    }\r\n\r\n    public String getSource() {\r\n        return source;\r\n    }\r\n\r\n    public int getSellPrice() {\r\n        return sellPrice;\r\n    }\r\n\r\n    private static HashMap<IngredientType, Integer> createIngredientsMap(Object... items) {\r\n        HashMap<IngredientType, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < items.length; i += 2) {\r\n            if (items[i] instanceof IngredientType && items[i + 1] instanceof Integer) {\r\n                map.put((IngredientType) items[i], (Integer) items[i + 1]);\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/enums/types/FoodType.java b/models/enums/types/FoodType.java
--- a/models/enums/types/FoodType.java	(revision f4300448b7afc91b5f1b5b6987ea037264a34170)
+++ b/models/enums/types/FoodType.java	(date 1746086508897)
@@ -43,6 +43,14 @@
         this.sellPrice = sellPrice;
     }
 
+    public static FoodType getFoodTypeByName(String foodTypeName) {
+        return switch (foodTypeName) {
+            case "Fried Egg" -> FRIED_EGG;
+            case
+                    // TODO: complete
+        };
+    }
+
     public String getName() {
         return this.name;
     }
