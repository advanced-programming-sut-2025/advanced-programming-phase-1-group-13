Index: controllers/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.*;\r\nimport models.enums.Quality;\r\nimport models.enums.Skill;\r\nimport models.enums.types.*;\r\nimport models.enums.types.FarmBuildingType;\r\nimport models.tools.FishingRod;\r\nimport models.tools.MilkPail;\r\nimport models.tools.Shear;\r\nimport models.tools.Tool;\r\nimport models.enums.environment.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    User player = App.getLoggedIn();\r\n    Game game = App.getCurrentGame();\r\n\r\n    // === PLAYER'S STATUS === //\r\n\r\n    public Result showPlayerEnergy() {\r\n        int playerEnergy = player.getEnergy();\r\n        return new Result(true, \"Your energy is: \" + playerEnergy);\r\n    }\r\n\r\n    public Result setPlayerEnergy(String energyAmountStr) {\r\n        int energyAmount = Integer.parseInt(energyAmountStr);\r\n\r\n        player.setEnergy(energyAmount);\r\n        return new Result(true, \"Energy set to \" + energyAmount);\r\n    }\r\n\r\n    public Result setUnlimitedEnergy() {\r\n        player.setEnergyUnlimited(true);\r\n        return new Result(true, \"Unlimited Energy activated!\");\r\n    }\r\n\r\n    public Result faint() {\r\n        player.faint();\r\n        return new Result(true, \"\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result showCurrentTool() {\r\n        Tool playerCurrentTool = player.getCurrentTool();\r\n        return new Result(true, \"Your tool is: \" + playerCurrentTool.toString()); // todo: is message OK?\r\n    }\r\n\r\n    public Result showLearntCookingRecipes() {\r\n        String learntRecipes = player.getStringLearntCookingRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    public Result showLearntCraftRecipes() {\r\n        String learntRecipes = player.getStringLearntCraftRecipes();\r\n        return new Result(true, learntRecipes);\r\n    }\r\n\r\n    // === INVENTORY === //\r\n    public Result inventoryShow() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result throwItemToTrash(String itemName, String numberStr) {\r\n        // command: inventory trash ...\r\n        // TODO: get Item from name\r\n        // TODO: get number from numStr\r\n        // TODO: throw away\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TOOLS, FOODS, ITEMS, AND CRAFTS === //\r\n\r\n    public Result equipTool(String toolName) {\r\n        // TODO: get Tool by its name (return appropriate failing message if null)\r\n        // TODO: equip tool\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result useTool(String directionString) {\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n        Position position = neighborTile(direction);\r\n        Tool tool = player.getCurrentTool();\r\n        if (canToolBeUsedHere(position, tool)) {\r\n            tool.useTool(direction);\r\n            return new Result(true, \"\"); // todo: appropriate message\r\n        }\r\n        return new Result(false, \"You can't use that tool in that direction\"); // todo: appropriate message\r\n    }\r\n\r\n    public Result placeItem(String itemName, String directionString) {\r\n        Item item = getItemByItemName(itemName);\r\n        Direction direction = Direction.getDirectionByDisplayName(directionString);\r\n\r\n        Position position = neighborTile(direction);\r\n        if (canItemBePlacedHere(position, item)) {\r\n            // TODO: place item\r\n            // TODO: LEARN ABOUT assert position != null;\r\n            return new Result(true, item + \" placed at \" + position.toString());\r\n        }\r\n        return new Result(false, \"you can't place that item at \" + position.toString());\r\n\r\n    }\r\n\r\n    public Result craft(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        if (!canCraft(item)) {\r\n            return new Result(false, \"Not possible to craft that item!\");\r\n        }\r\n        // TODO: craft item and add it to inventory.\r\n        return new Result(true, \"Item crafted and added to inventory.\");\r\n    }\r\n\r\n    public Result showCraftInfo(String craftName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddItem(String itemName) {\r\n        Item item = getItemByItemName(itemName);\r\n        // TODO: handle the optional \"count\" flag\r\n        // TODO: add item to inventory\r\n        return new Result(true, \"Item added to inventory.\");\r\n    }\r\n\r\n    // or name it cook() ?\r\n    public Result prepareCook(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        if (!canCook(food)) {\r\n            return new Result(false, \"You cannot cook this right now.\");\r\n            // todo: or specify the cause of the error...\r\n        }\r\n        // TODO: cook and add to inventory\r\n        return new Result(true, \"Yummy! Your meal is ready.\");\r\n    }\r\n\r\n    public Result eat(String foodName) {\r\n        FoodType food = getFoodTypeByName(foodName);\r\n        // TODO: check if player HAS the food, and return appropriate Result if not.\r\n        // TODO: increase energy\r\n        // TODO: apply buff\r\n        player.eat(food.getName());\r\n        return new Result(true, \"\"); // todo: return appropriate Result (list the buff, etc. ?)\r\n    }\r\n\r\n    private boolean canCraft(Item item) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canCook(FoodType food) {\r\n        // TODO: check if inventory is full; if so, return false.\r\n        // TODO: check if we know the recipe, return false if not.\r\n        // TODO: check if we have the ingredients, return false if not.\r\n        return false;\r\n    }\r\n\r\n    private boolean canToolBeUsedHere(Position position, Tool tool) {\r\n        // TODO: check the tile at \"position\" and check if tool can be used!\r\n        return false;\r\n    }\r\n\r\n    private boolean canItemBePlacedHere(Position position, Item item) {\r\n        // TODO: check the tile at \"position\" and check if item can be placed there!\r\n        return false;\r\n    }\r\n\r\n    private Position neighborTile(Direction direction) {\r\n        // TODO: return the position of the neighbour tile, if within the range of our map of farms.\r\n        return null;\r\n    }\r\n\r\n    private Tile getTileByPosition(Position position) {\r\n        // TODO: loop (the entire map) and return the tile whose position equals \"position\".\r\n        return null;\r\n    }\r\n\r\n\r\n    // === WALK === //\r\n\r\n    public Result walk(Path path, String walkConfirmation) {\r\n        Boolean playerConfirmed = switch (walkConfirmation) {\r\n            case \"y\" -> true;\r\n            case \"n\" -> false;\r\n            default -> null;\r\n        };\r\n        if (playerConfirmed == null) {\r\n            return new Result(false, \"the confirmation must be \\\"y\\\" or \\\"n\\\"\");\r\n        }\r\n        if (!playerConfirmed) {\r\n            return new Result(false, \"You denied the walk.\");\r\n        }\r\n        // TODO: Walk path! i.e. call player's inner changePosition(x,y) method.\r\n        Position destination = path.getPathTiles().getLast();\r\n        player.changePosition(destination);\r\n        return new Result(true, \"Walking...\");\r\n    }\r\n\r\n    public Result respondForWalkRequest(String xString, String yString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        Position destination = new Position(x, y);\r\n        Position origin = player.getPosition();\r\n        Path path = findValidPath(origin, destination);\r\n        if (path == null) {\r\n            return new Result(false, \"No valid path found!\");\r\n        }\r\n        StringBuilder walkConfirmRequest = new StringBuilder();\r\n        walkConfirmRequest\r\n                .append(\"Do you confirm the walk?\\n\")\r\n                .append(\"(respond with \\\"walk confirm\\\" followed by \\\"y\\\" or \\\"n\\\"\");\r\n        return new Result(true, walkConfirmRequest.toString());\r\n        // [we can also show the path and then ask for confirmation]\r\n\r\n        /*\r\n        In View: after calling this method, we expect the player to confirm/deny\r\n        Then, we call the walk() method.\r\n        */\r\n    }\r\n\r\n    private Path findValidPath(Position origin, Position destination) {\r\n        // give FarmsMap as argument?\r\n        if (!isDestinationAllowed(destination)) {\r\n            return null;\r\n        }\r\n        // TODO: build a valid path and return it\r\n        return new Path();\r\n    }\r\n\r\n    private boolean isDestinationAllowed(Position destination) {\r\n        // TODO: check if destination is in OUR Farm.\r\n        return false;\r\n    }\r\n\r\n    // === PRINT MAP === //\r\n\r\n    public Result printMap(String xString, String yString, String sizeString) {\r\n        int x = Integer.parseInt(xString);\r\n        int y = Integer.parseInt(yString);\r\n        int size = Integer.parseInt(sizeString);\r\n        return new Result(true, \"\"); // TODO: print map.\r\n    }\r\n\r\n    public Result printColoredMap() {\r\n        return new Result(true, \"\"); // TODO: print a colored map.\r\n    }\r\n\r\n    public Result showHelpReadingMap() {\r\n        return new Result(true, \"\"); // TODO: show the \"Help\" / enter the Help menu / ...\r\n    }\r\n\r\n\r\n    // === GAME STATUS === //\r\n\r\n    public Result cheatAdvanceTime(String howManyHoursString) {\r\n        int howManyHours = Integer.parseInt(howManyHoursString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAdvanceDate(String howManyDaysString) {\r\n        int howManyDays = Integer.parseInt(howManyDaysString);\r\n        // TODO;\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatThor(String x, String y) {\r\n        Position position = new Position(Integer.parseInt(x), Integer.parseInt(y));\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeather() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showWeatherForecast() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatWeatherSet(String newWeatherString) {\r\n        // TODO : get weather type from name\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result buildGreenhouse() {\r\n        if (!canBuildGreenhouse()) {\r\n            return new Result(false, \"You can't build greenhouse!\");\r\n        }\r\n        // TODO: build a greenhouse\r\n        return new Result(true, \"Building greenhouse...\"); // todo: show its info in detail?\r\n    }\r\n\r\n    private boolean canBuildGreenhouse() {\r\n        // TODO: check if we have the required material\r\n        // + is only ONE greenhouse allowed?\r\n        return false;\r\n    }\r\n\r\n\r\n    // === PLANTS === //\r\n\r\n    public Result plant(String seedName, String directionName) {\r\n        // TODO: get Seed from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showPlant(String xString, String yString) {\r\n        Position position = new Position(Integer.parseInt(xString), Integer.parseInt(yString));\r\n        Tile tile = getTileByPosition(position);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result fertilize(String fertilizerName, String directionName) {\r\n        // TODO : get FertilizerType from its name\r\n        Direction direction = Direction.getDirectionByDisplayName(directionName);\r\n        // TODO: fertilize\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n\r\n    // === FARM BUILDINGS & ANIMALS === //\r\n\r\n    public Result build(String farmBuildingTypeStr, String xString, String yString) {\r\n        FarmBuildingType farmBuildingType = FarmBuildingType.getFarmBuildingTypeByName(farmBuildingTypeStr);\r\n        Position position = getPositionByStrings(xString, yString);\r\n        if (position == null) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        }\r\n\r\n        Farm farm = player.getFarm();\r\n        FarmBuilding farmBuilding = new FarmBuilding(farmBuildingType, position);\r\n\r\n        boolean canPlace = canPlaceBuilding(farm, farmBuildingType, position);\r\n\r\n        if (!canPlace) {\r\n            return new Result(false, \"Can't build a \" + farmBuildingType.getName() +\r\n                    \" in this position, because the ground is not empty.\");\r\n        }\r\n\r\n        HashMap<Item, Integer> items = player.getBackpack().getItems();\r\n        Material wood = new Material(MaterialType.WOOD);\r\n        Material stone = new Material(MaterialType.STONE);\r\n        int woodInInventory = items.get(wood);\r\n        int stoneInInventory = items.get(stone);\r\n        int woodNeeded = farmBuildingType.getWoodCount();\r\n        int stoneNeeded = farmBuildingType.getStoneCount();\r\n        boolean enoughSupplies = (woodNeeded <= woodInInventory) && (stoneNeeded <= stoneInInventory);\r\n\r\n        double cost = farmBuildingType.getCost();\r\n        boolean enoughMoney = player.getBalance() >= cost;\r\n\r\n        if (!enoughSupplies && !enoughMoney) {\r\n            return new Result(false, \"You don't have enough supplies or money to build a \"\r\n                    + farmBuildingType.getName());\r\n        }\r\n\r\n        String methodOfPaymentDescription;\r\n        if (!enoughSupplies) {\r\n            player.changeBalance(cost);\r\n            methodOfPaymentDescription = \"You payed \" + cost + \"g to build it.\";\r\n        } else {\r\n            int newWoodCount = woodInInventory - woodNeeded;\r\n            int newStoneCount = stoneInInventory - stoneNeeded;\r\n            items.put(wood, newWoodCount);\r\n            items.put(stone, newStoneCount);\r\n            methodOfPaymentDescription = \"You used \" + woodNeeded + \" woods and \" + stoneNeeded + \" stones to build it\";\r\n        }\r\n        farm.getFarmBuildings().add(farmBuilding);\r\n\r\n        return new Result(true, \"A \" + farmBuildingType.getName() + \" has been built in \"\r\n                + position.toString() + \". \" + methodOfPaymentDescription);\r\n    }\r\n\r\n    public boolean canPlaceBuilding(Farm farm, FarmBuildingType farmBuildingType, Position position) {\r\n        int xTopLeft = position.getX();\r\n        int yTopLeft = position.getY();\r\n        for (int i = 0; i < farmBuildingType.getWidth(); i++) {\r\n            for (int j = 0; j < farmBuildingType.getLength(); j++) {\r\n                Position currentPosition = new Position(xTopLeft + i, yTopLeft + j);\r\n                if (!farm.getTileByPosition(currentPosition).getType().equals(TileType.NOT_PLOWED_GROUND)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public Result buyAnimal(String animalTypeStr, String name) {\r\n        AnimalType animalType = AnimalType.getAnimalTypeByName(animalTypeStr);\r\n        List<FarmBuildingType> livingSpaceTypes = animalType.getLivingSpaceTypes();\r\n        AnimalLivingSpace animalLivingSpace = getAvailableLivingSpace(livingSpaceTypes);\r\n\r\n        if (animalLivingSpace == null) {\r\n            return new Result(false, \"You don't have any available living spaces for a \"\r\n                    + animalType.getName() + \".\");\r\n        }\r\n\r\n        if (getAnimalByName(name) != null) {\r\n            return new Result(false, \"You already have an animal called \" + name + \".\");\r\n        }\r\n\r\n        if (App.getLoggedIn().getBalance() < animalType.getPrice()) {\r\n            return new Result(false, \"You do not have enough money to buy a \" +\r\n                    animalType.getName() + \".\");\r\n        }\r\n\r\n        App.getLoggedIn().changeBalance(animalType.getPrice());\r\n        Animal animal = new Animal(name, animalType, animalLivingSpace);\r\n        animalLivingSpace.addAnimal(animal);\r\n        return new Result(true, \"You bought a \" + animalType.getName() + \" called \" + name +\r\n                \" and housed it in a \" + animalLivingSpace.getFarmBuildingType().getName() + \".\");\r\n    }\r\n\r\n    public Result pet(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.changeFriendship(15);\r\n        animal.setLastPettingTime(App.getCurrentGame().getGameState().getTime());\r\n\r\n        return new Result(true, \"You pet your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \". Its' friendship level is now \" + animal.getFriendshipLevel() + \".\");\r\n    }\r\n\r\n    public void updateAnimals() { // TODO: call this method at the end of the day\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (!animal.hasBeenFedToday()) {\r\n                animal.changeFriendship(-20);\r\n            } else if (animal.getFriendshipLevel() >= 100) {\r\n                animal.produceProduct();\r\n            }\r\n\r\n            if (!animal.hasBeenPetToday()) {\r\n                animal.changeFriendship(-10);\r\n            }\r\n\r\n            if (animal.isOutside()) {\r\n                animal.changeFriendship(-20);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Result cheatSetFriendship(String animalName, String amountString) {\r\n        int amount;\r\n        if (!amountString.matches(\"\\\\d+\")) {\r\n            return new Result(false, \"Enter a number between 0 and 1000.\");\r\n        } else {\r\n            amount = Integer.parseInt(amountString);\r\n        }\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.setFriendshipLevel(amount);\r\n\r\n        return new Result(true, \"Friendship of your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \", has been set to \" + amount + \".\");\r\n    }\r\n\r\n    public Result showMyAnimalsInfo() {\r\n        StringBuilder message = new StringBuilder(\"Your animals: \\n\");\r\n\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n\r\n            message.append(\"-------------------------------\\n\").append(animal.getName()).append(\" (\").\r\n                    append(animal.getAnimalType().getName()).append(\"):\\n\").append(\"Friendship level: \").\r\n                    append(animal.getFriendshipLevel()).append(\"\\n\");\r\n\r\n            if (animal.hasBeenFedToday()) {\r\n                message.append(\"Has been fed today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been fed today.\\n\");\r\n            }\r\n\r\n            if (animal.hasBeenPetToday()) {\r\n                message.append(\"Has been pet today.\\n\");\r\n            } else {\r\n                message.append(\"Has not been pet today.\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, message.toString());\r\n    }\r\n\r\n    public Result shepherdAnimal(String animalName, String xString, String yString) {\r\n        Position newPosition = getPositionByStrings(xString, yString);\r\n        if (newPosition == null) {\r\n            return new Result(false, \"Enter two valid numbers for x and y.\");\r\n        }\r\n\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        Farm farm = player.getFarm();\r\n        FarmBuilding farmBuildingInNewPosition = getFarmBuildingByPosition(newPosition);\r\n        if (animal.isOutside()) {\r\n            if (animal.getPosition().equals(newPosition)) {\r\n                return new Result(false, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                        + \", is already at \" + newPosition.toString());\r\n            }\r\n\r\n            if (!farm.getTileByPosition(newPosition).getType().equals(TileType.GRASS)) {\r\n                return new Result(false, \"Your animal can only go on grass.\");\r\n            }\r\n\r\n            if (farmBuildingInNewPosition != null) {\r\n                if (!farmBuildingInNewPosition.equals(animal.getAnimalLivingSpace())) {\r\n                    return new Result(false, \"Your animal can only go on grass.\");\r\n                }\r\n\r\n                animal.setPosition(newPosition);\r\n                animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n                animal.setOutside(false);\r\n                return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                        + \", has been moved to its' living space.\");\r\n            }\r\n\r\n            animal.setPosition(newPosition);\r\n            return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                    + \", has been moved to \" + newPosition.toString() + \".\");\r\n        }\r\n\r\n        if (farmBuildingInNewPosition != null) {\r\n            if (farmBuildingInNewPosition.equals(animal.getAnimalLivingSpace())) {\r\n                return new Result(false, \"Your animal is already in its' living space.\");\r\n            }\r\n\r\n            return new Result(false, \"Your animal can only go on grass.\");\r\n        }\r\n\r\n        animal.setPosition(newPosition);\r\n        animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n        animal.changeFriendship(8);\r\n        return new Result(true, \"Your \" + animal.getAnimalType().getName() + \", \" + animalName\r\n                + \", has been moved to \" + newPosition.toString() + \" and is now outside. Its' friendship level is now \"\r\n                + animal.getFriendshipLevel() + \".\");\r\n    }\r\n\r\n    public Position getPositionByStrings(String xString, String yString) {\r\n        if (!xString.matches(\"\\\\d+\") || !yString.matches(\"\\\\d+\")) {\r\n            return null;\r\n        }\r\n\r\n        int x, y;\r\n        x = Integer.parseInt(xString);\r\n        y = Integer.parseInt(xString);\r\n        return new Position(x, y);\r\n    }\r\n\r\n    public FarmBuilding getFarmBuildingByPosition(Position position) {\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            int xTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getX();\r\n            int yTopLeft = farmBuilding.getPositionOfUpperLeftCorner().getY();\r\n            int length = farmBuilding.getLength();\r\n            int width = farmBuilding.getWidth();\r\n\r\n            int x = position.getX();\r\n            int y = position.getY();\r\n\r\n            if (xTopLeft < x && xTopLeft + length > x && yTopLeft < y && yTopLeft + width > y) {\r\n                return farmBuilding;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Result feedHayToAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        animal.setLastFeedingTime(App.getCurrentGame().getGameState().getTime());\r\n        return new Result(true, \"You fed hay to your \" + animal.getAnimalType().getName() + \", \"\r\n                + animalName + \".\");\r\n    }\r\n\r\n    public Result showProducedProducts() {\r\n        StringBuilder message = new StringBuilder(\"Uncollected animal products: \\n\");\r\n\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (!animal.getProducedProducts().isEmpty()) {\r\n                message.append(\"-------------------------------\\n\").append(animal.getName()).append(\" (\").\r\n                        append(animal.getAnimalType().getName()).append(\"):\\n\");\r\n\r\n                for (AnimalProduct product : animal.getProducedProducts()) {\r\n                    message.append(\"- \").append(product.getType().getName()).append(\"\\n\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(true, message.toString());\r\n    }\r\n\r\n    public Result collectProducts(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        AnimalType animalType = animal.getAnimalType();\r\n        ;\r\n        ArrayList<Item> items = new ArrayList<>(player.getBackpack().getItems().keySet());\r\n        HashMap<AnimalProduct, Integer> collectedProducts = new HashMap<>();\r\n\r\n        if (animalType.equals(AnimalType.COW)) {\r\n            MilkPail milkPail = null;\r\n            for (Item item : items) {\r\n                if (item instanceof MilkPail) {\r\n                    milkPail = (MilkPail) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (milkPail == null) {\r\n                return new Result(false, \"You need a milk pail to collect the cow's products.\");\r\n            }\r\n            milkPail.useTool(animal);\r\n        } else if (animalType.equals(AnimalType.GOAT)) {\r\n            MilkPail milkPail = null;\r\n            for (Item item : items) {\r\n                if (item instanceof MilkPail) {\r\n                    milkPail = (MilkPail) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (milkPail == null) {\r\n                return new Result(false, \"You need a milk pail to collect the goat's products.\");\r\n            } else {\r\n                milkPail.useTool(animal);\r\n            }\r\n        } else if (animalType.equals(AnimalType.SHEEP)) {\r\n            Shear shear = null;\r\n            for (Item item : items) {\r\n                if (item instanceof Shear) {\r\n                    shear = (Shear) item;\r\n                    break;\r\n                }\r\n            }\r\n            if (shear == null) {\r\n                return new Result(false, \"You need a shear to collect the sheep's products.\");\r\n            } else {\r\n                shear.useTool(animal);\r\n            }\r\n        } else if (animalType.equals(AnimalType.PIG) && !animal.isOutside()) {\r\n            return new Result(false, \"Take the pig outside to collect its' products.\");\r\n        } else {\r\n            HashMap<Item, Integer> itemsHashMap = player.getBackpack().getItems();\r\n            for (AnimalProduct item : animal.getProducedProducts()) {\r\n                player.getBackpack().getItems().put(item, itemsHashMap.getOrDefault(item, 0) + 1);\r\n                collectedProducts.put(item, collectedProducts.getOrDefault(item, 0) + 1);\r\n            }\r\n            animal.setProducedProducts(new ArrayList<>());\r\n        }\r\n\r\n        StringBuilder message = new StringBuilder(\"You collected \");\r\n        for (AnimalProduct item : collectedProducts.keySet()) {\r\n            message.append(item.getType().getName()).append(\" (x\").append(collectedProducts.get(item)).append(\"), \");\r\n        }\r\n        return new Result(true, message.toString().replaceFirst(\", $\", \"\\n\"));\r\n    }\r\n\r\n    public Result sellAnimal(String animalName) {\r\n        Animal animal = getAnimalByName(animalName);\r\n        if (animal == null) {\r\n            return new Result(false, \"Animal not found.\");\r\n        }\r\n\r\n        double price = animal.calculatePrice();\r\n        player.changeBalance(price);\r\n        animal.getAnimalLivingSpace().removeAnimal(animal);\r\n        return new Result(true, \"You sold your \" + animal.getAnimalType().getName() + \", \" +\r\n                animalName + \", for \" + price + \"g.\");\r\n    }\r\n\r\n    private Animal getAnimalByName(String name) {\r\n        for (Animal animal : getAllFarmAnimals()) {\r\n            if (animal.getName().equals(name)) {\r\n                return animal;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private ArrayList<Animal> getAllFarmAnimals() {\r\n        ArrayList<Animal> animals = new ArrayList<>();\r\n\r\n        Farm farm = player.getFarm();\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (farmBuilding.getFarmBuildingType().getIsCage() != null) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                animals.addAll(animalLivingSpace.getAnimals());\r\n            }\r\n        }\r\n\r\n        return animals;\r\n    }\r\n\r\n    public AnimalLivingSpace getAvailableLivingSpace(List<FarmBuildingType> livingSpaceTypes) {\r\n        Farm farm = player.getFarm();\r\n\r\n        for (FarmBuilding farmBuilding : farm.getFarmBuildings()) {\r\n            if (livingSpaceTypes.contains(farmBuilding.getFarmBuildingType())) {\r\n                AnimalLivingSpace animalLivingSpace = (AnimalLivingSpace) farmBuilding;\r\n                if (!animalLivingSpace.isFull()) {\r\n                    return animalLivingSpace;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // === FISHING === //\r\n\r\n    public Result fishing(String fishingRodName) {\r\n        FishingRod fishingRod = getFishingRodByName(fishingRodName);\r\n        if (fishingRod == null) {\r\n            return new Result(false, \"You do not have a \" + fishingRodName + \" fishing rod.\");\r\n        }\r\n\r\n        double M;\r\n        Weather currentWeather = App.getCurrentGame().getGameState().getCurrentWeather();\r\n        if (currentWeather.equals(Weather.SUNNY)) {\r\n            M = 1.5;\r\n        } else if (currentWeather.equals(Weather.RAINY)) {\r\n            M = 1.2;\r\n        } else {\r\n            M = 0.5;\r\n        }\r\n\r\n        Season currentSeason = App.getCurrentGame().getGameState().getTime().getSeason();\r\n\r\n        int fishingSkillLevel = player.getSkillLevels().get(Skill.FISHING).getNumber();\r\n        boolean canCatchLegendary = fishingSkillLevel == 4;\r\n\r\n        int numberOfCaughtFish = (int) Math.ceil(Math.random() * M * (fishingSkillLevel + 2));\r\n        HashMap<Item, Integer> itemsHashMap = player.getBackpack().getItems();\r\n        HashMap<Fish, Integer> caughtFish = new HashMap<>();\r\n        for (int i = 0; i < numberOfCaughtFish; i++) {\r\n            FishType fishType = FishType.getRandomFishType(currentSeason, canCatchLegendary);\r\n\r\n            double poleNumber = fishingRod.getRodType().getQualityNumber();\r\n            double qualityNumber = (Math.random() * (fishingSkillLevel + 2) * poleNumber) / (7 - M);\r\n            Quality quality = Quality.getQualityByNumber(qualityNumber);\r\n\r\n            Fish fish = new Fish(fishType, quality);\r\n            itemsHashMap.put(fish, itemsHashMap.getOrDefault(fish, 0) + 1);\r\n            caughtFish.put(fish, caughtFish.getOrDefault(fish, 0) + 1);\r\n        }\r\n\r\n        StringBuilder message = new StringBuilder(\"You caught \");\r\n        for (Fish fish : caughtFish.keySet()) {\r\n            message.append(fish.getType().getName()).append(\" (x\").append(caughtFish.get(fish)).append(\"), \");\r\n        }\r\n        return new Result(true, message.toString().replaceFirst(\", $\", \"\\n\"));\r\n    }\r\n\r\n    private FishingRod getFishingRodByName(String name) {\r\n        ArrayList<Item> items = new ArrayList<>(player.getBackpack().getItems().keySet());\r\n        for (Item item : items) {\r\n            if (item instanceof FishingRod fishingRod) {\r\n                if (fishingRod.getRodType().getName().equals(name)) {\r\n                    return fishingRod;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // === ARTISAN === //\r\n\r\n    public Result artisanUse(String artisanName, String itemNamesString) { // gets ingredients\r\n        ArrayList<String> itemsNames = new ArrayList<>(); //  TODO\r\n        ArrayList<Item> ingredientItems = new ArrayList<>();\r\n        for (String itemName : itemsNames) {\r\n            ingredientItems.add(getItemByItemName(itemName));\r\n        }\r\n        Artisan artisan = getArtisanByArtisanName(artisanName);\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result artisanGet(String artisanName) { // gives product\r\n        // TODO: if product is not ready yet, return appropriate failing message\r\n\r\n        // TODO: get the product from artisan\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private Artisan getArtisanByArtisanName(String artisanName) {\r\n        for (ArtisanType type : ArtisanType.values()) {\r\n            if (type.name().equalsIgnoreCase(artisanName)) {\r\n                return new Artisan(type);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Item getItemByItemName(String itemName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    // === SHOPS === //\r\n\r\n    public Result showAllProducts(String shopName) {\r\n        ShopType shopType;\r\n        StringBuilder productList = new StringBuilder(\"All Products in \" + shopType.name() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shopType) {\r\n                String availability = (product.getDailyLimit() == 0) ? \"Unavailable\" : \"Available\";\r\n                productList.append(String.format(\"- %s: %d gold (%s)\\n\", product.name(), product.getPrice(), availability));\r\n            }\r\n        }\r\n\r\n        return new Result(true, productList.toString());\r\n    }\r\n\r\n    public Result showAvailableProducts(ShopType shopType) {\r\n        StringBuilder availableProducts = new StringBuilder(\"Available Products in \" + shopType.name() + \":\\n\");\r\n\r\n        for (GoodsType product : GoodsType.values()) {\r\n            if (product.getShopType() == shopType) {\r\n                availableProducts.append(String.format(\"- %s: %d gold\\n\", product.name(), product.getPrice()));\r\n            }\r\n        }\r\n\r\n        return new Result(true, availableProducts.toString());\r\n    }\r\n\r\n\r\n    public Result purchase(String productName, Integer count) {\r\n        // count is optional and might be null. In that case:\r\n        if (count == null) {\r\n            count = 1;\r\n        }\r\n        Item product = getItemByItemName(productName);\r\n        // TODO: check if we have enough money\r\n        // TODO: check if the product is actually a valid product (not made up / invalid)\r\n        // TODO: check if the product is available\r\n        // TODO: check if the product has already been sold up to its daily limit (counts between different players)\r\n        // TODO: check if the given \"count\" is greater than the item's daily limit\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result cheatAddDollars(int amount, User currentUser) {\r\n        currentUser.setBalance(amount);\r\n        return new Result(true, \"User has \" + amount + \"dollars now.\");\r\n    }\r\n\r\n    public Result sell(String productName, Integer count) {\r\n        // count is optional and might be null. In that case we sell the entire available in inventory\r\n        if (count == null) {\r\n            // TODO: count = total num of that product in our inventory\r\n        }\r\n        // TODO: Check if such a product cannot be sold.\r\n        // TODO: Check if we do not have such a product.\r\n        // TODO: Check if we aren't neighbors with a shipping bin. (we have to be near shipping bin to sell)\r\n        // TODO: sell (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === FRIENDSHIPS === //\r\n\r\n    public Result showFriendshipLevels() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result talk(String username, String message) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTalkHistoryWithUser(String username) {\r\n        // TODO (also take into account its effect on friendship level)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveGift(String username, String itemName, int amount) {\r\n        // TODO: check the error cases (from Doc page.48)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftRate(int giftNumber, int rate) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result hug(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giveFlowerToUser(String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result askMarriage(String username, Object ring) {\r\n        // TODO: ring object type!!?\r\n        // TODO: will u marry me? :)\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result respondToMarriageRequest(boolean accepted, String username) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === TRADE === //\r\n\r\n    public Result tradeWithMoney(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeWithItem(String targetUsername, String type, String itemName, int amount, String targetItemName, int targetAmount) { // type?\r\n        // TODO: create a Trade class; int ID, User user1, User user2, Hashmap<Item, Integer>\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeList(String targetUsername, String type, String itemName, int amount, int price) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result tradeResponse(int id) { // type?\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showTradeHistory() { // type?\r\n        // TODO:\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    // === NPC === //\r\n\r\n    public Result meetNPC(String NCPName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result giftNPC(String NCPName, String itemName) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showFriendshipNPCList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result showQuestsList() {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    public Result finishQuest(int index) {\r\n        // TODO\r\n        return new Result(true, \"\");\r\n    }\r\n\r\n    private NPC getNPCByName(String NPCName) {\r\n        // TODO\r\n        return null;\r\n    }\r\n\r\n    FoodType\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/GameController.java b/controllers/GameController.java
--- a/controllers/GameController.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/controllers/GameController.java	(date 1746355071638)
@@ -820,12 +820,15 @@
 
     // === SHOPS === //
 
-    public Result showAllProducts(String shopName) {
-        ShopType shopType;
+    public Result showAllProducts() {
+        Shop shop = App.getCurrentShop();
+        if (shop == null) {
+            return new Result(false, "Enter a shop first!");
+        }
         StringBuilder productList = new StringBuilder("All Products in " + shopType.name() + ":\n");
 
         for (GoodsType product : GoodsType.values()) {
-            if (product.getShopType() == shopType) {
+            if (product.getShopType() == shop.getType()) {
                 String availability = (product.getDailyLimit() == 0) ? "Unavailable" : "Available";
                 productList.append(String.format("- %s: %d gold (%s)\n", product.name(), product.getPrice(), availability));
             }
Index: views/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\nimport controllers.GameController;\r\nimport models.enums.commands.GameCommands;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu implements AppMenu {\r\n    private final GameController controller = new GameController();\r\n    Matcher matcher;\r\n\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n        String inputLine = scanner.nextLine();\r\n        if ((matcher = GameCommands.ENERGY_SHOW.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showPlayerEnergy());\r\n        } else if ((matcher = GameCommands.CHEAT_ENERGY_SET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.setPlayerEnergy(matcher.group(\"value\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ENERGY_UNLIMITED.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.setUnlimitedEnergy());\r\n        } else if ((matcher = GameCommands.TOOLS_SHOW_CURRENT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showCurrentTool());\r\n        } else if ((matcher = GameCommands.COOKING_SHOW_RECIPES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showLearntCookingRecipes());\r\n        } else if ((matcher = GameCommands.CRAFTING_SHOW_RECIPES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showLearntCraftRecipes());\r\n        } else if ((matcher = GameCommands.INVENTORY_SHOW.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.inventoryShow());\r\n        } else if ((matcher = GameCommands.THROW_ITEM_TO_TRASH.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.throwItemToTrash(\r\n                    matcher.group(\"itemName\"),\r\n                    matcher.group(\"number\")\r\n            ));\r\n        } else if ((matcher = GameCommands.TOOLS_EQUIP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.equipTool(matcher.group(\"tool_name\")));\r\n        } else if ((matcher = GameCommands.TOOLS_USE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.useTool(matcher.group(\"direction\")));\r\n        } else if ((matcher = GameCommands.PLACE_ITEM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.placeItem(\r\n                    matcher.group(\"item_name\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.CRAFTING_CRAFT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.craft(matcher.group(\"item_name\")));\r\n        } else if ((matcher = GameCommands.CRAFT_INFO.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showCraftInfo(matcher.group(\"craft_name\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ADD_ITEM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAddItem(matcher.group(\"item_name\")));\r\n            // TODO: handle the optional \"count\" flag\r\n        } else if ((matcher = GameCommands.COOKING_PREPARE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.prepareCook(matcher.group(\"recipe_name\")));\r\n        } else if ((matcher = GameCommands.EAT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.eat(matcher.group(\"food_name\")));\r\n        } else if ((matcher = GameCommands.WALK.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.respondForWalkRequest(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.WALK_CONFIRM.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.eat(matcher.group(\"y_or_n\")));\r\n        } else if ((matcher = GameCommands.PRINT_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.printMap(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\"),\r\n                    matcher.group(\"size\")\r\n            ));\r\n        } else if ((matcher = GameCommands.PRINT_COLORED_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.printMap(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\"),\r\n                    matcher.group(\"size\")\r\n            ));\r\n        } else if ((matcher = GameCommands.HELP_READING_MAP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showHelpReadingMap());\r\n        } else if ((matcher = GameCommands.CHEAT_ADV_TIME.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAdvanceTime(matcher.group(\"hourIncrease\")));\r\n        } else if ((matcher = GameCommands.CHEAT_ADV_DATE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatAdvanceDate(matcher.group(\"dayIncrease\")));\r\n        } else if ((matcher = GameCommands.CHEAT_THOR.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatThor(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")));\r\n        } else if ((matcher = GameCommands.WEATHER.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showWeather());\r\n        } else if ((matcher = GameCommands.WEATHER_FORECAST.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showWeatherForecast());\r\n        } else if ((matcher = GameCommands.CHEAT_WEATHER_SET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatWeatherSet(matcher.group(\"type\")));\r\n        } else if ((matcher = GameCommands.GREENHOUSE_BUILD.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.buildGreenhouse());\r\n        } else if ((matcher = GameCommands.PLANT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.plant(\r\n                    matcher.group(\"seed\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.SHOW_PLANT.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showPlant(\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.FERTILIZE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.fertilize(\r\n                    matcher.group(\"fertilizer\"),\r\n                    matcher.group(\"direction\")\r\n            ));\r\n        } else if ((matcher = GameCommands.BUILD.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.build(\r\n                    matcher.group(\"building_name\"),\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        }\r\n        // continue from \" buyAnimal \"\r\n        else if ((matcher = GameCommands.BUY_ANIMAL.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.buyAnimal(\r\n                    matcher.group(\"animal\"),\r\n                    matcher.group(\"animal_name\")\r\n            ));\r\n        } else if ((matcher = GameCommands.PET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.pet(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.CHEAT_SET_FRIENDSHIP.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.cheatSetFriendship(\r\n                    matcher.group(\"animal_name\"),\r\n                    matcher.group(\"amount\")\r\n            ));\r\n        } else if ((matcher = GameCommands.ANIMALS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showMyAnimalsInfo());\r\n        } else if ((matcher = GameCommands.SHEPHERD_ANIMALS.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.shepherdAnimal(\r\n                    matcher.group(\"animal_name\"),\r\n                    matcher.group(\"x\"),\r\n                    matcher.group(\"y\")\r\n            ));\r\n        } else if ((matcher = GameCommands.FEED_HAY.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.feedHayToAnimal(matcher.group(\"animal_name\")));\r\n        } else if ((matcher = GameCommands.PRODUCES.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.showProducedProducts());\r\n        } else if ((matcher = GameCommands.COLLECT_PRODUCE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.collectProducts(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.SELL_ANIMAL.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.sellAnimal(matcher.group(\"name\")));\r\n        } else if ((matcher = GameCommands.FISHING.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.fishing(matcher.group(\"fishing_pole\")));\r\n        } else if ((matcher = GameCommands.ARTISAN_USE.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.artisanUse(\r\n                    matcher.group(\"artisan_name\"),\r\n                    matcher.group(\"items_names\")\r\n            ));\r\n        } else if ((matcher = GameCommands.ARTISAN_GET.getMatcher(inputLine)) != null) {\r\n            System.out.println(controller.artisanGet(matcher.group(\"artisan_name\")));\r\n        }\r\n        else if ((matcher = GameCommands.SHOW_ALL_PRODUCTS.getMatcher(inputLine)) != null) {\r\n//            System.out.println(controller.showAllProducts());\r\n        }\r\n        else {\r\n            System.out.println(\"Invalid Command. Please try again!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/views/GameMenu.java b/views/GameMenu.java
--- a/views/GameMenu.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/views/GameMenu.java	(date 1746354897817)
@@ -151,7 +151,7 @@
             System.out.println(controller.artisanGet(matcher.group("artisan_name")));
         }
         else if ((matcher = GameCommands.SHOW_ALL_PRODUCTS.getMatcher(inputLine)) != null) {
-//            System.out.println(controller.showAllProducts());
+            System.out.println(controller.showAllProducts());
         }
         else {
             System.out.println("Invalid Command. Please try again!");
Index: models/enums/types/NPCType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums.types;\r\n\r\nimport models.farming.Crop;\r\nimport models.tools.Tool;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic enum NPCType {\r\n    CLINT(\r\n            Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    MORRIS(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    PIERRE(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    ROBIN(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>() {{\r\n                put(\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MaterialType.WOOD, 80);\r\n                            put(MineralType.IRON_BAR, 10);\r\n                            put(MaterialType.WOOD, 1000);\r\n                        }},\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.GOLD_COIN, 1000);\r\n                            put(GoodsType.BEEHIVE, 3);\r\n                            put(MineralType.COIN, 25000);\r\n                        }}\r\n                );\r\n            }},\r\n            new ArrayList<ItemType>() {{\r\n                add(FoodType.SPAGHETTI);\r\n                add(MaterialType.WOOD);\r\n                add(MineralType.IRON_BAR);\r\n            }}\r\n    ),\r\n    WILLY(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    MARNIE(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    GUS(Role.SHOPKEEPER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>(),\r\n            new ArrayList<ItemType>()\r\n    ),\r\n    SEBASTIAN(Role.VILLAGER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>() {{\r\n                put(\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.IRON, 50);\r\n                            put(FoodType.PUMPKIN_PIE, 1);\r\n                            put(MineralType.STONE, 150);\r\n                        }},\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.DIAMOND, 2);\r\n                            put(MineralType.GOLD_COIN, 5000);\r\n                            put(MineralType.QUARTZ, 50);\r\n                        }}\r\n                );\r\n            }},\r\n            new ArrayList<ItemType>() {{\r\n                add(AnimalProductType.WOOL);\r\n                add(FoodType.PUMPKIN_PIE);\r\n                add(FoodType.PIZZA);\r\n            }}\r\n    ),\r\n    ABIGAIL(Role.VILLAGER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>() {{\r\n                put(\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.GOLD_BAR, 1);\r\n                            put(CropType.PUMPKIN, 1);\r\n                            put(CropType.WHEAT, 50);\r\n                        }},\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(null, 0); // Friendship XP\r\n                            put(MineralType.GOLD_COIN, 500);\r\n                            put(ToolTypes.WATERING_CAN, 1);\r\n                        }}\r\n                );\r\n            }},\r\n            new ArrayList<ItemType>() {{\r\n                add(MineralType.STONE);\r\n                add(MineralType.IRON_ORE);\r\n                add(GoodsType.COFFEE);\r\n            }}\r\n    ),\r\n    HARVEY(Role.VILLAGER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>() {{\r\n                put(\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(null, 1); // Friendship XP\r\n                            put(FishType.SALMON, 1);\r\n                            put(ProcessedItemType.WINE, 1);\r\n                        }},\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.GOLD_COIN, 750);\r\n                            put(null, 1); // Friendship XP\r\n                            put(FoodType.SALAD, 5);\r\n                        }}\r\n                );\r\n            }},\r\n            new ArrayList<ItemType>() {{\r\n                add(GoodsType.COFFEE);\r\n                add(FoodType.VEGETABLE_MEDLEY);\r\n                add(ProcessedItemType.WINE);\r\n            }}\r\n    ),\r\n    LEA(Role.VILLAGER,\r\n            new HashMap<HashMap<ItemType, Integer>, HashMap<ItemType, Integer>>() {{\r\n                put(\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MaterialType.HARD_WOOD, 10);\r\n                            put(FishType.SALMON, 1);\r\n                            put(MaterialType.WOOD, 200);\r\n                        }},\r\n                        new HashMap<ItemType, Integer>() {{\r\n                            put(MineralType.GOLD_COIN, 500);\r\n                            put(FoodType.SALMON_DINNER, 1);\r\n                            put(GoodsType.SCARE_CROW, 3);\r\n                        }}\r\n                );\r\n            }},\r\n            new ArrayList<ItemType>() {{\r\n                add(FoodType.SALAD);\r\n                add(CropType.GRAPE);\r\n                add(ProcessedItemType.WINE);\r\n            }}\r\n    )\r\n    ;\r\n\r\n    private final Role role;\r\n    private final HashMap<HashMap<ItemType, Integer>, // requests\r\n            HashMap<ItemType, Integer> // rewards\r\n            > quests;\r\n    private final ArrayList<ItemType> favorites;\r\n\r\n    NPCType(Role role, HashMap quests, ArrayList favorites) {\r\n        this.role = role;\r\n        this.quests = quests;\r\n        this.favorites = favorites;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/enums/types/NPCType.java b/models/enums/types/NPCType.java
--- a/models/enums/types/NPCType.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/enums/types/NPCType.java	(date 1746355567347)
@@ -150,4 +150,18 @@
         this.quests = quests;
         this.favorites = favorites;
     }
+
+    public Role getRole() {
+        return role;
+    }
+
+    public HashMap<HashMap<ItemType, Integer>, // requests
+            HashMap<ItemType, Integer> // rewards
+            > getQuests() {
+        return quests;
+    }
+
+    public ArrayList<ItemType> getFavorites() {
+        return favorites;
+    }
 }
Index: models/NPC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.enums.environment.Time;\r\nimport models.enums.types.NPCType;\r\nimport models.enums.types.Role;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class NPC {\r\n    NPCType name;\r\n    Role role;\r\n    ArrayList<String> dialog;\r\n    HashMap<Time, Position> schedule;\r\n\r\n    public NPC(NPCType name, Role role, ArrayList<String> dialog, HashMap<Time, Position> schedule) {\r\n        this.name = name;\r\n        this.role = role;\r\n        this.dialog = dialog;\r\n        this.schedule = schedule;\r\n    }\r\n\r\n    public NPCType getName() {\r\n        return name;\r\n    }\r\n\r\n    public Role getRole() {\r\n        return role;\r\n    }\r\n\r\n    public ArrayList<String> getDialog() {\r\n        return dialog;\r\n    }\r\n\r\n    public HashMap<Time, Position> getSchedule() {\r\n        return schedule;\r\n    }\r\n\r\n    public void addDialog(String sentence) {\r\n        // TODO\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/NPC.java b/models/NPC.java
--- a/models/NPC.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/NPC.java	(date 1746355639795)
@@ -8,20 +8,18 @@
 import java.util.HashMap;
 
 public class NPC {
-    NPCType name;
+    NPCType type;
     Role role;
     ArrayList<String> dialog;
-    HashMap<Time, Position> schedule;
 
-    public NPC(NPCType name, Role role, ArrayList<String> dialog, HashMap<Time, Position> schedule) {
-        this.name = name;
-        this.role = role;
-        this.dialog = dialog;
-        this.schedule = schedule;
+    public NPC(NPCType type) {
+        this.type = type;
+        this.role = type.getRole();
+        this.dialog = new ArrayList<>();
     }
 
-    public NPCType getName() {
-        return name;
+    public NPCType getType() {
+        return type;
     }
 
     public Role getRole() {
Index: models/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.enums.Menu;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class App {\r\n    private static ArrayList<User> users = new ArrayList<>();\r\n    private static ArrayList<Game> games = new ArrayList<>();\r\n    private static User loggedIn = null;\r\n    private static Menu currentMenu = Menu.LOGIN_MENU;\r\n    private static Game currentGame;\r\n    \r\n    public static Menu getCurrentMenu() {\r\n        return currentMenu;\r\n    }\r\n\r\n    public static void setCurrentMenu(Menu currentMenu) {\r\n        App.currentMenu = currentMenu;\r\n    }\r\n\r\n    public static User getLoggedIn() {\r\n        return loggedIn;\r\n    }\r\n\r\n    public static void setLoggedIn(User user) {\r\n        App.loggedIn = user;\r\n    }\r\n\r\n    public static Game getCurrentGame() {\r\n        return currentGame;\r\n    }\r\n\r\n    public static void setCurrentGame(Game currentGame) {\r\n        App.currentGame = currentGame;\r\n    }\r\n\r\n    public static ArrayList<User> getUsers() {\r\n        return users;\r\n    }\r\n\r\n    public static void addUser(User user) {\r\n        App.users.add(user);\r\n    }\r\n\r\n    public static ArrayList<Game> getGames() {\r\n        return games;\r\n    }\r\n\r\n    public static void setGames(ArrayList<Game> games) {\r\n        App.games = games;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/App.java b/models/App.java
--- a/models/App.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/App.java	(date 1746354897809)
@@ -10,7 +10,8 @@
     private static User loggedIn = null;
     private static Menu currentMenu = Menu.LOGIN_MENU;
     private static Game currentGame;
-    
+    private static Shop currentShop = null;
+
     public static Menu getCurrentMenu() {
         return currentMenu;
     }
@@ -39,6 +40,10 @@
         return users;
     }
 
+    public static Shop getCurrentShop() {
+        return currentShop;
+    }
+
     public static void addUser(User user) {
         App.users.add(user);
     }
Index: models/Shop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.enums.types.ShopType;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Shop {\r\n    private String name;\r\n    private ShopType type;\r\n    private HashMap<Item, Integer> shopInventory;\r\n    private int balance;\r\n    private NPC owner;\r\n\r\n    public Shop(ShopType type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public HashMap<Item, Integer> getShopInventory() {\r\n        return shopInventory;\r\n    }\r\n\r\n    public int getBalance() {\r\n        return balance;\r\n    }\r\n\r\n    public NPC getOwner() {\r\n        return owner;\r\n    }\r\n\r\n    void addProduct(Item item, int count) {\r\n        // TODO!\r\n    }\r\n\r\n    void removeProduct(Item item, int count) {\r\n        // TODO\r\n    }\r\n\r\n    void sellProduct(Item item, int count) {\r\n        // TODO\r\n    }\r\n\r\n    void showAvailableProducts() {\r\n        // TODO\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/Shop.java b/models/Shop.java
--- a/models/Shop.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/Shop.java	(date 1746355567347)
@@ -8,17 +8,23 @@
     private String name;
     private ShopType type;
     private HashMap<Item, Integer> shopInventory;
-    private int balance;
+    private int balance = 0;
     private NPC owner;
 
     public Shop(ShopType type) {
         this.type = type;
+        this.name = type.getName();
+
     }
 
     public String getName() {
         return name;
     }
 
+    public ShopType getType() {
+        return type;
+    }
+
     public HashMap<Item, Integer> getShopInventory() {
         return shopInventory;
     }
Index: models/enums/types/ShopType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums.types;\r\n\r\npublic enum ShopType {\r\n    BLACKSMITH,\r\n    MARNIE_RANCH,\r\n    THE_STARDROP_SALLON,\r\n    CARPENTER_SHOP,\r\n    JOJAMART,\r\n    PIERRE_GENERAL_STORE,\r\n    FISH_SHOP;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/enums/types/ShopType.java b/models/enums/types/ShopType.java
--- a/models/enums/types/ShopType.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/enums/types/ShopType.java	(date 1746355567331)
@@ -1,11 +1,43 @@
 package models.enums.types;
 
+import models.NPC;
+
 public enum ShopType {
-    BLACKSMITH,
-    MARNIE_RANCH,
-    THE_STARDROP_SALLON,
-    CARPENTER_SHOP,
-    JOJAMART,
-    PIERRE_GENERAL_STORE,
-    FISH_SHOP;
+    BLACKSMITH("Blacksmith"),
+    MARNIE_RANCH("Marnie's Ranch"),
+    THE_STARDROP_SALOON("The Stardrop Saloon"),
+    CARPENTER_SHOP("Carpenter's Shop"),
+    JOJAMART("Jojamart"),
+    PIERRE_GENERAL_STORE("Pierre's General Store"),
+    FISH_SHOP("Fish Shop"),
+    ;
+
+    private final String name;
+    private final NPC owner;
+
+    ShopType(String name, NPC owner) {
+        this.name = name;
+        this.owner = owner;
+    }
+
+    public static ShopType getShopTypeByName(String name) {
+        return switch (name) {
+            case "Blacksmith" -> BLACKSMITH;
+            case "Marnie's Ranch" -> MARNIE_RANCH;
+            case "TheStardrop Saloon" -> THE_STARDROP_SALOON;
+            case "Carpenter's Shop" -> CARPENTER_SHOP;
+            case "Jojamart" -> JOJAMART;
+            case "Pierre's General Store" -> PIERRE_GENERAL_STORE;
+            case "Fish Shop" -> FISH_SHOP;
+            default -> null;
+        };
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public NPC getOwner() {
+        return owner;
+    }
 }
Index: models/enums/types/GoodsType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums.types;\r\nimport models.enums.environment.Season;\r\nimport java.util.List;\r\n\r\npublic enum GoodsType implements ItemType {\r\n    COPPER_ORE(\"Copper Ore\", \"A common ore that can be smelted into bars.\", 75, -1, ShopType.BLACKSMITH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    IRON_ORE(\"Iron Ore\", \"A fairly common ore that can be smelted into bars.\", 150, -1, ShopType.BLACKSMITH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    COAL(\"Coal\", \"A combustible rock that is useful for crafting and smelting.\", 150, -1, ShopType.BLACKSMITH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    GOLD_ORE(\"Gold Ore\", \"A precious ore that can be smelted into bars.\", 400, -1, ShopType.BLACKSMITH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    HAY(\"Hay\", \"Dried grass used as animal food.\", 50, -1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    MILK_PAIL(\"Milk Pail\", \"Gather milk from your animals.\", 1000, 1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SHEARS(\"Shears\", \"Use this to collect wool from sheep\", 1000, 1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BEER(\"Beer\", \"Drink in moderation.\", 400, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SALAD(\"Salad\", \"A healthy garden salad.\", 220, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BREAD(\"Bread\", \"A crusty baguette.\", 120, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SPAGHETTI(\"Spaghetti\", \"An old favorite.\", 240, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    PIZZA(\"Pizza\", \"It's popular for all the right reasons.\", 600, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    COFFEE(\"Coffee\", \"It smells delicious. This is sure to give you a boost.\", 300, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    HASHBROWNS_RECIPE(\"Hashbrowns Recipe\", \"A recipe to make Hashbrowns\", 50, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    OMELET_RECIPE(\"Omelet Recipe\", \"A recipe to make Omelet\", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    PANCAKES_RECIPE(\"Pancakes Recipe\", \"A recipe to make Pancakes\", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BREAD_RECIPE(\"Bread Recipe\", \"A recipe to make Bread\", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    TORTILLA_RECIPE(\"Tortilla Recipe\", \"A recipe to make Tortilla\", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    PIZZA_RECIPE(\"Pizza Recipe\", \"A recipe to make Pizza\", 150, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    MAKI_ROLL_RECIPE(\"Maki Roll Recipe\", \"A recipe to make Maki Roll\", 300, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    TRIPLE_SHOT_ESPRESSO_RECIPE(\"Triple Shot Espresso Recipe\", \"A recipe to make Triple Shot Espresso\", 5000, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    COOKIE_RECIPE(\"Cookie Recipe\", \"A recipe to make Cookie\", 300, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    WOOD(\"Wood\", \"A sturdy, yet flexible plant material with a wide variety of uses.\", 10, -1, ShopType.CARPENTER_SHOP, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    STONE(\"Stone\", \"A common material with many uses in crafting and building.\", 20, -1, ShopType.CARPENTER_SHOP, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    JOJA_COLA(\"Joja Cola\", \"The flagship product of Joja corporation.\", 75, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    ANCIENT_SEED(\"Ancient Seed\", \"Could these still grow?\", 500, 1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    GRASS_STARTER(\"Grass Starter\", \"Place this on your farm to start a new patch of grass.\", 125, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SUGAR(\"Sugar\", \"Adds sweetness to pastries and candies. Too much can be unhealthy.\", 125, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    WHEAT_FLOUR(\"Wheat Flour\", \"A common cooking ingredient made from crushed wheat seeds.\", 125, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    RICE_JOJA(\"Rice\", \"A basic grain often served under vegetables.\", 250, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    PARSNIP_SEEDS(\"Parsnip Seeds\", \"Plant these in the spring. Takes 4 days to mature.\", 25, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    BEAN_STARTER(\"Bean Starter\", \"Plant these in the spring. Takes 10 days to mature, but keeps producing after that. Grows on a trellis.\", 75, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    CAULIFLOWER_SEEDS(\"Cauliflower Seeds\", \"Plant these in the spring. Takes 12 days to produce a large cauliflower.\", 100, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    POTATO_SEEDS(\"Potato Seeds\", \"Plant these in the spring. Takes 6 days to mature, and has a chance of yielding multiple potatoes.\", 62, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    STRAWBERRY_SEEDS(\"Strawberry Seeds\", \"Plant these in spring. Takes 8 days to mature, and keeps producing strawberries.\", 100, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    TULIP_BULB(\"Tulip Bulb\", \"Plant in spring. Takes 6 days to produce a colorful flower. Assorted colors.\", 25, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    KALE_SEEDS(\"Kale Seeds\", \"Plant these in the spring. Takes 6 days to mature. Harvest with the scythe.\", 87, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    COFFEE_BEANS(\"Coffee Beans\", \"Plant in summer or spring. Takes 10 days to grow, then produces coffee beans every other day.\", 200, 1, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    CARROT_SEEDS(\"Carrot Seeds\", \"Plant in the spring. Takes 3 days to grow.\", 5, 10, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    RHUBARB_SEEDS(\"Rhubarb Seeds\", \"Plant these in the spring. Takes 13 days to mature.\", 100, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    JAZZ_SEEDS(\"Jazz Seeds\", \"Plant in spring. Takes 7 days to produce a blue puffball flower.\", 37, 5, ShopType.JOJAMART, List.of(Season.SPRING)),\r\n    TOMATO_SEEDS(\"Tomato Seeds\", \"Plant these in the summer. Takes 11 days to mature, and continues to produce after first harvest.\", 62, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    PEPPER_SEEDS(\"Pepper Seeds\", \"Plant these in the summer. Takes 5 days to mature, and continues to produce after first harvest.\", 50, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    WHEAT_SEEDS(\"Wheat Seeds\", \"Plant these in the summer or fall. Takes 4 days to mature. Harvest with the scythe.\", 12, 10, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    SUMMER_SQUASH_SEEDS(\"Summer Squash Seeds\", \"Plant in the summer. Takes 6 days to grow, and continues to produce after first harvest.\", 10, 10, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    RADISH_SEEDS(\"Radish Seeds\", \"Plant these in the summer. Takes 6 days to mature.\", 50, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    MELON_SEEDS(\"Melon Seeds\", \"Plant these in the summer. Takes 12 days to mature.\", 100, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    HOPS_STARTER(\"Hops Starter\", \"Plant these in the summer. Takes 11 days to grow, but keeps producing after that. Grows on a trellis.\", 75, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    POPPY_SEEDS(\"Poppy Seeds\", \"Plant in summer. Produces a bright red flower in 7 days.\", 125, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    SPANGLE_SEEDS(\"Spangle Seeds\", \"Plant in summer. Takes 8 days to produce a vibrant tropical flower. Assorted colors.\", 62, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    STARFRUIT_SEEDS(\"Starfruit Seeds\", \"Plant these in the summer. Takes 13 days to mature.\", 400, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    SUNFLOWER_SEEDS(\"Sunflower Seeds\", \"Plant in summer or fall. Takes 8 days to produce a large sunflower. Yields more seeds at harvest.\", 125, 5, ShopType.JOJAMART, List.of(Season.SUMMER)),\r\n    CORN_SEEDS(\"Corn Seeds\", \"Plant these in the summer or fall. Takes 14 days to mature, and continues to produce after first harvest.\", 187, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    EGGPLANT_SEEDS(\"Eggplant Seeds\", \"Plant these in the fall. Takes 5 days to mature, and continues to produce after first harvest.\", 25, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    PUMPKIN_SEEDS(\"Pumpkin Seeds\", \"Plant these in the fall. Takes 13 days to mature.\", 125, 5, ShopType.JOJAMART,List.of(Season.FALL)),\r\n    BROCCOLI_SEEDS(\"Broccoli Seeds\", \"Plant in the fall. Takes 8 days to mature, and continues to produce after first harvest.\", 15, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    AMARANTH_SEEDS(\"Amaranth Seeds\", \"Plant these in the fall. Takes 7 days to grow. Harvest with the scythe.\", 87, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    GRAPE_STARTER(\"Grape Starter\", \"Plant these in the fall. Takes 10 days to grow, but keeps producing after that. Grows on a trellis.\", 75, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    BEET_SEEDS(\"Beet Seeds\", \"Plant these in the fall. Takes 6 days to mature.\", 20, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    YAM_SEEDS(\"Yam Seeds\", \"Plant these in the fall. Takes 10 days to mature.\", 75, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    BOK_CHOY_SEEDS(\"Bok Choy Seeds\", \"Plant these in the fall. Takes 4 days to mature.\", 62, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    CRANBERRY_SEEDS(\"Cranberry Seeds\", \"Plant these in the fall. Takes 7 days to mature, and continues to produce after first harvest.\", 300, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    FAIRY_SEEDS(\"Fairy Seeds\", \"Plant in fall. Takes 12 days to produce a mysterious flower. Assorted colors.\", 250, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    RARE_SEED(\"Rare Seed\", \"Sow in fall. Takes all season to grow.\", 1000, 1, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    WHAT_SEEDS(\"Wheat Seeds\", \"Plant these in the summer or fall. Takes 4 days to mature. Harvest with the scythe.\", 12, 5, ShopType.JOJAMART, List.of(Season.FALL)),\r\n    POWDERMELON_SEEDS(\"Powdermelon Seeds\", \"This special melon grows in the winter. Takes 7 days to grow.\", 20, 10, ShopType.JOJAMART, List.of(Season.WINTER)),\r\n    RICE(\"Rice\", \"A basic grain often served under vegetables.\", 200, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    WHEAT_FLOUR_PIERRE(\"Wheat Flour\", \"A common cooking ingredient made from crushed wheat seeds.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BOUQUET(\"Bouquet\", \"A gift that shows your romantic interest. (Unlocked after reaching level 2 friendship with a player)\", 1000, 2, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    WEDDING_RING(\"Wedding Ring\", \"Used to ask for another farmer's hand in marriage. (Unlocked after reaching level 3 friendship with a player)\", 10000, 2, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    DEHYDRATOR_RECIPE(\"Dehydrator (Recipe)\", \"A recipe to make Dehydrator.\", 10000, 1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    GRASS_STARTER_RECIPE(\"Grass Starter (Recipe)\", \"A recipe to make Grass Starter.\", 1000, 1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SUGAR_PIERRE(\"Sugar\", \"Adds sweetness to pastries and candies. Too much can be unhealthy.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    OIL(\"Oil\", \"All-purpose cooking oil.\", 200, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    VINEGAR(\"Vinegar\", \"An aged fermented liquid used in many cooking recipes.\", 200, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BASIC_FERTILIZER(\"Basic Fertilizer\", \"Improves soil quality a little, increasing your chance to grow quality crops. Mix into tilled soil.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    QUALITY_FERTILIZER(\"Quality Fertilizer\", \"Improves soil quality, increasing your chance to grow quality crops. Mix into tilled soil.\", 150, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    GRASS_STARTER_PIERRE(\"Grass Starter\", \"Place this on your farm to start a new patch of grass.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SPEED_GRO(\"Speed-Gro\", \"Stimulates leaf production. Guaranteed to increase growth rate by at least 10%. Mix into tilled soil.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    DELUXE_SPEED_GRO(\"Deluxe Speed-Gro\", \"Stimulates leaf production. Guaranteed to increase growth rate by at least 25%. Mix into tilled soil.\", 150, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    APPLE_SAPLING(\"Apple Sapling\", \"Takes 28 days to produce a mature Apple tree. Bears fruit in the fall. Only grows if the 8 surrounding tiles are empty.\", 4000, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    APRICOT_SAPLING(\"Apricot Sapling\", \"Takes 28 days to produce a mature Apricot tree. Bears fruit in the spring. Only grows if the 8 surrounding tiles are empty.\", 2000, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    CHERRY_SAPLING(\"Cherry Sapling\", \"Takes 28 days to produce a mature Cherry tree. Bears fruit in the spring. Only grows if the 8 surrounding tiles are empty.\", 3400, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    ORANGE_SAPLING(\"Orange Sapling\", \"Takes 28 days to produce a mature Orange tree. Bears fruit in the summer. Only grows if the 8 surrounding tiles are empty.\", 4000, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    PEACH_SAPLING(\"Peach Sapling\", \"Takes 28 days to produce a mature Peach tree. Bears fruit in the summer. Only grows if the 8 surrounding tiles are empty.\", 6000, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    POMEGRANATE_SAPLING(\"Pomegranate Sapling\", \"Takes 28 days to produce a mature Pomegranate tree. Bears fruit in the fall. Only grows if the 8 surrounding tiles are empty.\", 6000, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    BASIC_RETAINING_SOIL(\"Basic Retaining Soil\", \"This soil has a chance of staying watered overnight. Mix into tilled soil.\", 100, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    QUALITY_RETAINING_SOIL(\"Quality Retaining Soil\", \"This soil has a good chance of staying watered overnight. Mix into tilled soil.\", 150, -1, ShopType.PIERRE_GENERAL_STORE, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),\r\n    SCARE_CROW(\"\", \"\", 0, 0, null, null),\r\n    BEEHIVE(\"\", \"\", 0, 0, null, null);\r\n\r\n    private final String name;\r\n    private final String description;\r\n    private final int price;\r\n    private final int dailyLimit;  // -1 for unlimited\r\n    private final ShopType shopType;\r\n    private final List<Season> seasonalStock;\r\n\r\n    GoodsType(String name,\r\n              String description,\r\n              int price,\r\n              int dailyLimit,\r\n              ShopType shopType ,\r\n              List<Season> seasonalStocks ) {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.price = price;\r\n        this.dailyLimit = dailyLimit;\r\n        this.shopType = shopType;\r\n        this.seasonalStock = seasonalStocks;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public int getDailyLimit() {\r\n        return dailyLimit;\r\n    }\r\n\r\n    public ShopType getShopType() {\r\n        return shopType;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/enums/types/GoodsType.java b/models/enums/types/GoodsType.java
--- a/models/enums/types/GoodsType.java	(revision a21d226acbe7dc85966fe97fc99355862e7c2e7d)
+++ b/models/enums/types/GoodsType.java	(date 1746354628404)
@@ -10,21 +10,21 @@
     HAY("Hay", "Dried grass used as animal food.", 50, -1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
     MILK_PAIL("Milk Pail", "Gather milk from your animals.", 1000, 1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
     SHEARS("Shears", "Use this to collect wool from sheep", 1000, 1, ShopType.MARNIE_RANCH, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    BEER("Beer", "Drink in moderation.", 400, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    SALAD("Salad", "A healthy garden salad.", 220, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    BREAD("Bread", "A crusty baguette.", 120, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    SPAGHETTI("Spaghetti", "An old favorite.", 240, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    PIZZA("Pizza", "It's popular for all the right reasons.", 600, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    COFFEE("Coffee", "It smells delicious. This is sure to give you a boost.", 300, -1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    HASHBROWNS_RECIPE("Hashbrowns Recipe", "A recipe to make Hashbrowns", 50, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    OMELET_RECIPE("Omelet Recipe", "A recipe to make Omelet", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    PANCAKES_RECIPE("Pancakes Recipe", "A recipe to make Pancakes", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    BREAD_RECIPE("Bread Recipe", "A recipe to make Bread", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    TORTILLA_RECIPE("Tortilla Recipe", "A recipe to make Tortilla", 100, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    PIZZA_RECIPE("Pizza Recipe", "A recipe to make Pizza", 150, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    MAKI_ROLL_RECIPE("Maki Roll Recipe", "A recipe to make Maki Roll", 300, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    TRIPLE_SHOT_ESPRESSO_RECIPE("Triple Shot Espresso Recipe", "A recipe to make Triple Shot Espresso", 5000, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
-    COOKIE_RECIPE("Cookie Recipe", "A recipe to make Cookie", 300, 1, ShopType.THE_STARDROP_SALLON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    BEER("Beer", "Drink in moderation.", 400, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    SALAD("Salad", "A healthy garden salad.", 220, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    BREAD("Bread", "A crusty baguette.", 120, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    SPAGHETTI("Spaghetti", "An old favorite.", 240, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    PIZZA("Pizza", "It's popular for all the right reasons.", 600, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    COFFEE("Coffee", "It smells delicious. This is sure to give you a boost.", 300, -1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    HASHBROWNS_RECIPE("Hashbrowns Recipe", "A recipe to make Hashbrowns", 50, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    OMELET_RECIPE("Omelet Recipe", "A recipe to make Omelet", 100, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    PANCAKES_RECIPE("Pancakes Recipe", "A recipe to make Pancakes", 100, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    BREAD_RECIPE("Bread Recipe", "A recipe to make Bread", 100, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    TORTILLA_RECIPE("Tortilla Recipe", "A recipe to make Tortilla", 100, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    PIZZA_RECIPE("Pizza Recipe", "A recipe to make Pizza", 150, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    MAKI_ROLL_RECIPE("Maki Roll Recipe", "A recipe to make Maki Roll", 300, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    TRIPLE_SHOT_ESPRESSO_RECIPE("Triple Shot Espresso Recipe", "A recipe to make Triple Shot Espresso", 5000, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
+    COOKIE_RECIPE("Cookie Recipe", "A recipe to make Cookie", 300, 1, ShopType.THE_STARDROP_SALOON, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
     WOOD("Wood", "A sturdy, yet flexible plant material with a wide variety of uses.", 10, -1, ShopType.CARPENTER_SHOP, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
     STONE("Stone", "A common material with many uses in crafting and building.", 20, -1, ShopType.CARPENTER_SHOP, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
     JOJA_COLA("Joja Cola", "The flagship product of Joja corporation.", 75, -1, ShopType.JOJAMART, List.of(Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER)),
